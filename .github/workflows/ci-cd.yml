name: CI/CD Pipeline

on:
  push:
    branches: [ main, gcp-deploy-win, final-monitor1 ]
  pull_request:
    branches: [ main, gcp-deploy-win, final-monitor1 ]

env:
  NODE_VERSION: '20'
  PROJECT_ID: 'mqi-ims'
  GAE_SERVICE: 'default'
  INSTANCE_NAME: 'product-management-db'

jobs:
  # Lint and Test Job
  test:
    name: 🧪 Test & Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔍 Run linting
      run: |
        if [ -f "package.json" ] && grep -q "lint" package.json; then
          npm run lint
        else
          echo "No lint script found, skipping..."
        fi
      continue-on-error: true
      
    - name: 🧪 Run tests
      run: |
        if [ -f "package.json" ] && grep -q "test" package.json; then
          npm test
        else
          echo "No test script found, skipping..."
        fi
      continue-on-error: true
      
    - name: 🔒 Security audit
      run: npm audit --audit-level moderate
      continue-on-error: true

  # Database Schema Validation
  validate-schema:
    name: 🗄️ Validate Database Schema
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔍 Validate SQL files
      run: |
        echo "Checking SQL files syntax..."
        for file in sql/*.sql; do
          if [ -f "$file" ]; then
            echo "Validating $file"
            # Basic SQL syntax validation (could be enhanced with actual SQL linter)
            if grep -q "DROP\s\+DATABASE\|TRUNCATE\s\+TABLE\|DELETE\s\+FROM.*WHERE.*1=1" "$file"; then
              echo "⚠️ Warning: Potentially dangerous SQL command found in $file"
            fi
          fi
        done
        
    - name: 🧪 Test database setup script
      run: |
        echo "Testing database setup script syntax..."
        node -c setup-db.js
        echo "✅ Database setup script syntax is valid"

  # Check required secrets before deployment
  check-secrets:
    name: 🔍 Validate Required Secrets
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/gcp-deploy-win' || github.ref == 'refs/heads/final-monitor1' || github.ref == 'refs/heads/main'
    outputs:
      secrets-available: ${{ steps.check.outputs.secrets-available }}
    
    steps:
    - name: 📋 Check for required secrets
      id: check
      run: |
        echo "Checking for required GitHub secrets..."
        if [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
          echo "❌ Missing GCP_SA_KEY secret"
          echo "secrets-available=false" >> $GITHUB_OUTPUT
          echo "::error::Missing required secret: GCP_SA_KEY"
          echo "::error::Please add Google Cloud Service Account key as GCP_SA_KEY secret"
          echo "::error::Visit: https://github.com/${{ github.repository }}/settings/secrets/actions"
          exit 1
        else
          echo "✅ GCP_SA_KEY secret is configured"
          echo "secrets-available=true" >> $GITHUB_OUTPUT
        fi

  # Build and Deploy to Development (on feature branches)
  deploy-dev:
    name: 🚀 Deploy to Development
    runs-on: ubuntu-latest
    needs: [test, validate-schema, check-secrets]
    if: github.ref == 'refs/heads/gcp-deploy-win' && github.event_name == 'push' && needs.check-secrets.outputs.secrets-available == 'true'
    environment: development
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci --only=production
      
    - name: 🔧 Setup environment variables
      run: |
        echo "NODE_ENV=development" >> .env
        echo "DB_HOST=/cloudsql/${{ env.PROJECT_ID }}:us-central1:${{ env.INSTANCE_NAME }}" >> .env
        echo "DB_USER=${{ secrets.DEV_DB_USER }}" >> .env
        echo "DB_PASSWORD=${{ secrets.DEV_DB_PASSWORD }}" >> .env
        echo "DB_NAME=${{ secrets.DEV_DB_NAME }}" >> .env
        
    - name: 🔐 Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        
    - name: ☁️ Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        
    - name: 🚀 Deploy to App Engine Development
      run: |
        # Create development app.yaml
        cp app.yaml app-dev.yaml
        sed -i 's/service: default/service: dev/' app-dev.yaml
        
        gcloud app deploy app-dev.yaml \
          --version=dev-$(date +%Y%m%d-%H%M%S) \
          --promote \
          --stop-previous-version \
          --quiet
          
    - name: 🌐 Get deployment URL
      run: |
        DEV_URL=$(gcloud app browse --service=dev --no-launch-browser)
        echo "🌐 Development URL: $DEV_URL"
        echo "dev_url=$DEV_URL" >> $GITHUB_OUTPUT

  # Deploy to Staging (on final-monitor1 branch)
  deploy-staging:
    name: 🎭 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, validate-schema, check-secrets]
    if: github.ref == 'refs/heads/final-monitor1' && github.event_name == 'push' && needs.check-secrets.outputs.secrets-available == 'true'
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci --only=production
      
    - name: 🔧 Setup environment variables
      run: |
        echo "NODE_ENV=staging" >> .env
        echo "DB_HOST=/cloudsql/${{ env.PROJECT_ID }}:us-central1:${{ env.INSTANCE_NAME }}" >> .env
        echo "DB_USER=${{ secrets.STAGING_DB_USER }}" >> .env
        echo "DB_PASSWORD=${{ secrets.STAGING_DB_PASSWORD }}" >> .env
        echo "DB_NAME=${{ secrets.STAGING_DB_NAME }}" >> .env
        
    - name: 🔐 Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        
    - name: ☁️ Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        
    - name: 🚀 Deploy to App Engine Staging
      run: |
        # Create staging app.yaml
        cp app.yaml app-staging.yaml
        sed -i 's/service: default/service: staging/' app-staging.yaml
        
        gcloud app deploy app-staging.yaml \
          --version=staging-$(date +%Y%m%d-%H%M%S) \
          --promote \
          --stop-previous-version \
          --quiet

  # Deploy to Production (on main branch)
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, validate-schema, check-secrets]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.check-secrets.outputs.secrets-available == 'true'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci --only=production
      
    - name: 🔧 Setup environment variables
      run: |
        echo "NODE_ENV=production" >> .env
        echo "DB_HOST=/cloudsql/${{ env.PROJECT_ID }}:us-central1:${{ env.INSTANCE_NAME }}" >> .env
        echo "DB_USER=${{ secrets.PROD_DB_USER }}" >> .env
        echo "DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}" >> .env
        echo "DB_NAME=${{ secrets.PROD_DB_NAME }}" >> .env
        
    - name: 🔐 Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        
    - name: ☁️ Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        
    - name: 🚀 Deploy to App Engine Production
      run: |
        gcloud app deploy app.yaml \
          --version=prod-$(date +%Y%m%d-%H%M%S) \
          --promote \
          --stop-previous-version \
          --quiet
          
    - name: 🌐 Get production URL
      run: |
        PROD_URL=$(gcloud app browse --no-launch-browser)
        echo "🌐 Production URL: $PROD_URL"
        echo "prod_url=$PROD_URL" >> $GITHUB_OUTPUT

  # Health Check after deployment
  health-check:
    name: 🩺 Health Check
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 🩺 Health Check - Production
      run: |
        echo "Performing health check on production..."
        PROD_URL="https://${{ env.PROJECT_ID }}.uc.r.appspot.com"
        
        # Wait for deployment to be ready
        sleep 30
        
        # Check if the app responds
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$PROD_URL" || echo "000")
        
        if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "302" ]; then
          echo "✅ Health check passed! App is responding (Status: $HTTP_STATUS)"
        else
          echo "❌ Health check failed! App is not responding (Status: $HTTP_STATUS)"
          exit 1
        fi

  # Database Migration (Manual trigger)
  migrate-database:
    name: 🗄️ Database Migration
    runs-on: ubuntu-latest
    needs: [check-secrets]
    if: github.event_name == 'workflow_dispatch' && needs.check-secrets.outputs.secrets-available == 'true'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔐 Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        
    - name: ☁️ Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        
    - name: 🗄️ Run Database Migration
      run: |
        echo "Running database migration..."
        chmod +x scripts/migrate-database.sh
        ./scripts/migrate-database.sh
        
    - name: 🧪 Run Database Setup
      run: |
        echo "Setting up database schema..."
        node setup-db.js

  # Security Scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔒 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📄 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
