name: CI/CD Pipeline

on:
  push:
    branches: [ main, gcp-deploy-win, final-monitor1 ]
  pull_request:
    branches: [ main, gcp-deploy-win, final-monitor1 ]

env:
  NODE_VERSION: '20'
  PROJECT_ID: 'mqi-ims'
  GAE_SERVICE: 'default'
  INSTANCE_NAME: 'product-management-db'

jobs:
  # Lint and Test Job
  test:
    name: 🧪 Test & Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔍 Run linting
      run: |
        if [ -f "package.json" ] && grep -q "lint" package.json; then
          npm run lint
        else
          echo "No lint script found, skipping..."
        fi
      continue-on-error: true
      
    - name: 🧪 Run tests
      run: |
        if [ -f "package.json" ] && grep -q "test" package.json; then
          npm test
        else
          echo "No test script found, skipping..."
        fi
      continue-on-error: true
      
    - name: 🔒 Security audit
      run: npm audit --audit-level moderate
      continue-on-error: true

  # Database Schema Validation
  validate-schema:
    name: 🗄️ Validate Database Schema
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔍 Validate SQL files
      run: |
        echo "Checking SQL files syntax..."
        for file in sql/*.sql; do
          if [ -f "$file" ]; then
            echo "Validating $file"
            # Basic SQL syntax validation (could be enhanced with actual SQL linter)
            if grep -q "DROP\s\+DATABASE\|TRUNCATE\s\+TABLE\|DELETE\s\+FROM.*WHERE.*1=1" "$file"; then
              echo "⚠️ Warning: Potentially dangerous SQL command found in $file"
            fi
          fi
        done
        
    - name: 🧪 Test database setup script
      run: |
        echo "Testing database setup script syntax..."
        node -c setup-db.js
        echo "✅ Database setup script syntax is valid"

  # Check required secrets before deployment
  check-secrets:
    name: 🔍 Validate Required Secrets
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/gcp-deploy-win' || github.ref == 'refs/heads/final-monitor1' || github.ref == 'refs/heads/main'
    outputs:
      secrets-available: ${{ steps.check.outputs.secrets-available }}
    
    steps:
    - name: 📋 Check for required secrets
      id: check
      run: |
        echo "Checking for required GitHub secrets..."
        if [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
          echo "❌ Missing GCP_SA_KEY secret"
          echo "secrets-available=false" >> $GITHUB_OUTPUT
          echo "::error::Missing required secret: GCP_SA_KEY"
          echo "::error::Please add Google Cloud Service Account key as GCP_SA_KEY secret"
          echo "::error::Visit: https://github.com/${{ github.repository }}/settings/secrets/actions"
          exit 1
        else
          echo "✅ GCP_SA_KEY secret is configured"
          echo "secrets-available=true" >> $GITHUB_OUTPUT
        fi

  # Build and Deploy to Development (on feature branches)
  deploy-dev:
    name: 🚀 Deploy to Development
    runs-on: ubuntu-latest
    needs: [test, validate-schema, check-secrets]
    if: github.ref == 'refs/heads/gcp-deploy-win' && github.event_name == 'push' && needs.check-secrets.outputs.secrets-available == 'true'
    environment:
      name: development
      url: https://dev-dot-${{ env.PROJECT_ID }}.uc.r.appspot.com
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci --only=production
      
    - name: 🔧 Setup environment variables
      run: |
        # Load deployment environment variables
        if [ -f ".env.deployment" ]; then
          echo "Loading deployment environment variables..."
          # Use a more robust method to load variables with spaces
          while IFS= read -r line; do
            # Skip comments and empty lines
            if [[ ! "$line" =~ ^[[:space:]]*# && -n "$line" ]]; then
              # Export the variable
              export "$line"
            fi
          done < .env.deployment
          
          echo "✅ Loaded deployment configuration"
          echo "PROJECT_ID: $PROJECT_ID"
          echo "DEV_SERVICE: $DEV_SERVICE"
        fi
        
        # Create environment file for this deployment
        cat > .env << EOF
        NODE_ENV=development
        DB_HOST=$DEV_DB_HOST
        DB_USER=$DEV_DB_USER
        DB_PASSWORD=$DEV_DB_PASSWORD
        DB_NAME=$DEV_DB_NAME
        SESSION_SECRET=$DEV_SESSION_SECRET
        EMAIL_USER=$EMAIL_USER
        EMAIL_PASS=$EMAIL_PASS
        ADMIN_EMAIL=$ADMIN_EMAIL
        EOF
        
        echo "✅ Environment variables configured for development"
        
    - name: 🔐 Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        
    - name: ☁️ Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        
    - name: 🚀 Deploy to App Engine Development
      run: |
        # Load deployment environment variables first
        if [ -f ".env.deployment" ]; then
          echo "Loading deployment environment variables..."
          # Use a more robust method to load variables with spaces
          while IFS= read -r line; do
            # Skip comments and empty lines
            if [[ ! "$line" =~ ^[[:space:]]*# && -n "$line" ]]; then
              # Export the variable
              export "$line"
            fi
          done < .env.deployment
        fi
        
        # Ensure config directory exists
        mkdir -p config
        
        # Create development app.yaml with configuration from .env.deployment
        cat > config/app-dev.yaml << EOF
        runtime: nodejs20
        service: $DEV_SERVICE
        
        env_variables:
          NODE_ENV: 'development'
          DB_HOST: '$DEV_DB_HOST'
          DB_USER: '$DEV_DB_USER'
          DB_PASSWORD: '$DEV_DB_PASSWORD'
          DB_NAME: '$DEV_DB_NAME'
          SESSION_SECRET: '$DEV_SESSION_SECRET'
          EMAIL_USER: '$EMAIL_USER'
          EMAIL_PASS: '$EMAIL_PASS'
          ADMIN_EMAIL: '$ADMIN_EMAIL'
        
        beta_settings:
          cloud_sql_instances: $PROJECT_ID:$REGION:$INSTANCE_NAME
        
        automatic_scaling:
          min_instances: 1
          max_instances: 2
          target_cpu_utilization: 0.65
        
        handlers:
        - url: /.*
          script: auto
          secure: always
        EOF
        
        echo "✅ Generated config/app-dev.yaml with environment configuration"
        
        # Deploy with retry logic
        MAX_RETRIES=3
        RETRY_COUNT=0
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          echo "Deployment attempt $((RETRY_COUNT + 1))..."
          
          if gcloud app deploy config/app-dev.yaml \
            --version=dev-$(date +%Y%m%d-%H%M%S) \
            --no-promote \
            --quiet \
            --project=$PROJECT_ID; then
            echo "✅ Deployment successful!"
            break
          else
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "⚠️ Deployment failed, retrying in 30 seconds..."
              sleep 30
            else
              echo "❌ Deployment failed after $MAX_RETRIES attempts"
              exit 1
            fi
          fi
        done
          
    - name: 🌐 Get deployment URL
      run: |
        DEV_URL=$(gcloud app browse --service=dev --no-launch-browser)
        echo "🌐 Development URL: $DEV_URL"
        echo "dev_url=$DEV_URL" >> $GITHUB_OUTPUT

  # Deploy to Staging (on final-monitor1 branch)
  deploy-staging:
    name: 🎭 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, validate-schema, check-secrets]
    if: github.ref == 'refs/heads/final-monitor1' && github.event_name == 'push' && needs.check-secrets.outputs.secrets-available == 'true'
    environment:
      name: staging
      url: https://staging-dot-${{ env.PROJECT_ID }}.uc.r.appspot.com
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci --only=production
      
    - name: 🔧 Setup environment variables
      run: |
        # Load deployment environment variables
        if [ -f ".env.deployment" ]; then
          echo "Loading deployment environment variables..."
          # Export variables from .env.deployment file
          set -a  # automatically export all variables
          source .env.deployment
          set +a  # stop auto-exporting
          
          echo "✅ Loaded deployment configuration"
          echo "PROJECT_ID: $PROJECT_ID"
          echo "STAGING_SERVICE: $STAGING_SERVICE"
        fi
        
        # Create environment file for this deployment
        cat > .env << EOF
        NODE_ENV=staging
        DB_HOST=$STAGING_DB_HOST
        DB_USER=$STAGING_DB_USER
        DB_PASSWORD=$STAGING_DB_PASSWORD
        DB_NAME=$STAGING_DB_NAME
        SESSION_SECRET=$STAGING_SESSION_SECRET
        EMAIL_USER=$EMAIL_USER
        EMAIL_PASS=$EMAIL_PASS
        ADMIN_EMAIL=$ADMIN_EMAIL
        EOF
        
        echo "✅ Environment variables configured for staging"
        
    - name: 🔐 Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        
    - name: ☁️ Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        
    - name: 🚀 Deploy to App Engine Staging
      run: |
        # Load deployment environment variables first
        if [ -f ".env.deployment" ]; then
          set -a
          source .env.deployment
          set +a
        fi
        
        # Ensure config directory exists
        mkdir -p config
        
        # Create staging app.yaml
        cat > config/app-staging.yaml << EOF
        runtime: nodejs20
        service: $STAGING_SERVICE
        
        env_variables:
          NODE_ENV: 'staging'
          DB_HOST: '$STAGING_DB_HOST'
          DB_USER: '$STAGING_DB_USER'
          DB_PASSWORD: '$STAGING_DB_PASSWORD'
          DB_NAME: '$STAGING_DB_NAME'
          SESSION_SECRET: '$STAGING_SESSION_SECRET'
          EMAIL_USER: '$EMAIL_USER'
          EMAIL_PASS: '$EMAIL_PASS'
          ADMIN_EMAIL: '$ADMIN_EMAIL'
        
        beta_settings:
          cloud_sql_instances: $PROJECT_ID:$REGION:$INSTANCE_NAME
        
        automatic_scaling:
          min_instances: 1
          max_instances: 3
          target_cpu_utilization: 0.65
        
        handlers:
        - url: /.*
          script: auto
          secure: always
        EOF
        
        gcloud app deploy config/app-staging.yaml \
          --version=staging-$(date +%Y%m%d-%H%M%S) \
          --promote \
          --stop-previous-version \
          --quiet

  # Deploy to Production (on main branch)
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, validate-schema, check-secrets]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.check-secrets.outputs.secrets-available == 'true'
    environment:
      name: production
      url: https://${{ env.PROJECT_ID }}.uc.r.appspot.com
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci --only=production
      
    - name: 🔧 Setup environment variables
      run: |
        # Load deployment environment variables
        if [ -f ".env.deployment" ]; then
          echo "Loading deployment environment variables..."
          # Export variables from .env.deployment file
          set -a  # automatically export all variables
          source .env.deployment
          set +a  # stop auto-exporting
          
          echo "✅ Loaded deployment configuration"
          echo "PROJECT_ID: $PROJECT_ID"
          echo "PROD_SERVICE: $PROD_SERVICE"
        fi
        
        # Create environment file for this deployment
        cat > .env << EOF
        NODE_ENV=production
        DB_HOST=$PROD_DB_HOST
        DB_USER=$PROD_DB_USER
        DB_PASSWORD=$PROD_DB_PASSWORD
        DB_NAME=$PROD_DB_NAME
        SESSION_SECRET=$PROD_SESSION_SECRET
        EMAIL_USER=$EMAIL_USER
        EMAIL_PASS=$EMAIL_PASS
        ADMIN_EMAIL=$ADMIN_EMAIL
        EOF
        
        echo "✅ Environment variables configured for production"
        
    - name: 🔐 Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        
    - name: ☁️ Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        
    - name: 🚀 Deploy to App Engine Production
      run: |
        # Load deployment environment variables first
        if [ -f ".env.deployment" ]; then
          set -a
          source .env.deployment
          set +a
        fi
        
        # Use existing app.yaml for production or create from config
        if [ -f "config/app.yaml" ]; then
          gcloud app deploy config/app.yaml \
            --version=prod-$(date +%Y%m%d-%H%M%S) \
            --promote \
            --stop-previous-version \
            --quiet
        else
          gcloud app deploy app.yaml \
            --version=prod-$(date +%Y%m%d-%H%M%S) \
            --promote \
            --stop-previous-version \
            --quiet
        fi
          
    - name: 🌐 Get production URL
      run: |
        PROD_URL=$(gcloud app browse --no-launch-browser)
        echo "🌐 Production URL: $PROD_URL"
        echo "prod_url=$PROD_URL" >> $GITHUB_OUTPUT

  # Health Check after deployment
  health-check:
    name: 🩺 Health Check
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 🩺 Health Check - Production
      run: |
        echo "Performing health check on production..."
        PROD_URL="https://${{ env.PROJECT_ID }}.uc.r.appspot.com"
        
        # Wait for deployment to be ready
        sleep 30
        
        # Check if the app responds
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$PROD_URL" || echo "000")
        
        if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "302" ]; then
          echo "✅ Health check passed! App is responding (Status: $HTTP_STATUS)"
        else
          echo "❌ Health check failed! App is not responding (Status: $HTTP_STATUS)"
          exit 1
        fi

  # Database Migration (Manual trigger)
  migrate-database:
    name: 🗄️ Database Migration
    runs-on: ubuntu-latest
    needs: [check-secrets]
    if: github.event_name == 'workflow_dispatch' && needs.check-secrets.outputs.secrets-available == 'true'
    environment:
      name: production
      url: https://${{ env.PROJECT_ID }}.uc.r.appspot.com
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔐 Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        
    - name: ☁️ Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        
    - name: 🗄️ Run Database Migration
      run: |
        echo "Running database migration..."
        chmod +x scripts/migrate-database.sh
        ./scripts/migrate-database.sh
        
    - name: 🧪 Run Database Setup
      run: |
        echo "Setting up database schema..."
        node setup-db.js

  # Security Scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔒 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📄 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
