<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inventory Management - Product Management System</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body class="bg-gray-50">

    <%- include('../partials/navbar') %>
    
    <main class="ml-64 p-6">
        <%- include('../partials/messages') %>
        
        <div class="mb-8">
            <h1 class="text-3xl font-bold text-gray-900">Inventory Management</h1>
            <p class="text-gray-600">Add and manage products in inventory</p>
        </div>
        
        <!-- Add Product Button -->
        <div class="mb-8">
            <button type="button" onclick="openModal()" class="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                <i class="fas fa-plus mr-2"></i>Add Product
            </button>
        </div>

        <!-- Modal -->
        <div id="productModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
            <div class="relative top-20 mx-auto p-5 border w-11/12 max-w-4xl shadow-lg rounded-md bg-white">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg leading-6 font-medium text-gray-900">
                        Add New Product
                    </h3>
                    <button type="button" onclick="closeModal()" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times text-xl"></i>
                    </button>
                </div>

                <form action="/monitor/add-product" method="POST" class="space-y-6" id="productForm">
                    <!-- Basic Information -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label for="name" class="block text-sm font-medium text-gray-700">Product Name *</label>
                            <input type="text" id="name" name="name" required 
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        </div>
                        
                        <div>
                            <label for="product_category" class="block text-sm font-medium text-gray-700">Product Category *</label>
                            <select name="product_category" id="productCategory" required onchange="toggleCalibrationFields()" 
                                    class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                <option value="">Select Category</option>
                                <option value="hardware">Hardware</option>
                                <option value="test_equipment">Test Equipment</option>
                                <option value="software">Software</option>
                                <option value="tooling">Tooling</option>
                                <option value="consumables">Consumables</option>
                                <option value="measuring_instrument">Measuring Instrument</option>
                                <option value="embedded_devices">Embedded devices</option>
                                <option value="lab_equipment">Lab Equipment</option>
                                <option value="prototypes">Prototypes</option>
                                <option value="accessories">Accessories</option>
                                <option value="network_equipment">Network Equipment</option>
                                <option value="miscellaneous">Miscellaneous</option>
                            

               </select>
                        </div>
                        
                        <div id="typeDiv">
                            <label for="type" class="block text-sm font-medium text-gray-700">Type *</label>
                            <input type="text" id="type" name="type" required placeholder="Enter type (e.g., Laptop, Desktop)" 
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        </div>
                        
                        <div id="modelDiv">
                            <label for="model" class="block text-sm font-medium text-gray-700">Model</label>
                            <input type="text" id="model" name="model" placeholder="Enter Model no. mentioned on the product e.g., Dell Inspiron 15" 
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        </div>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                            <label for="serial" class="block text-sm font-medium text-gray-700">Product Serial Number</label>
                            <input type="text" id="serial" name="serial" placeholder="Enter Unique Serial no mentioned on the product" 
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        </div>

                        <div>
                            <label for="purchase_date" class="block text-sm font-medium text-gray-700">Purchase Date</label>
                            <input type="date" id="purchase_date" name="purchase_date"
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        </div>

                        <div>
                            <label for="pr_no" class="block text-sm font-medium text-gray-700">PR No</label>
                            <input type="text" id="pr_no" name="pr_no" placeholder="Enter SAP Purchase Request Number"
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        </div>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                            <label for="po_number" class="block text-sm font-medium text-gray-700">PO Number</label>
                            <input type="text" id="po_number" name="po_number" placeholder="Enter SAP Purchase Order Number"
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        </div>

                        <div>
                            <label for="inward_date" class="block text-sm font-medium text-gray-700">Inward Date</label>
                            <input type="date" id="inward_date" name="inward_date"
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        </div>

                        <div>
                            <label for="inwarded_by" class="block text-sm font-medium text-gray-700">Inwarded By</label>
                            <input type="text" id="inwarded_by" name="inwarded_by" placeholder="Name of person"
                                   value="<%= user && user.name ? user.name : '' %>"
                                   
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        </div>
                    </div>

                    <!-- Calibration Section -->
                    <div id="calibrationSection" class="hidden">
                        <h4 class="text-md font-medium text-gray-800 mb-3">ðŸ”¬ Calibration Information</h4>
                        
                        <div class="bg-blue-50 rounded-lg p-3 mb-4">
                            <label class="flex items-center space-x-3">
                                <input type="checkbox" name="requires_calibration" id="requiresCalibration" onchange="toggleCalibrationDetails()" 
                                       class="w-4 h-4 text-indigo-600 rounded focus:ring-indigo-500">
                                <span class="text-sm font-medium text-gray-700">This hardware requires calibration</span>
                            </label>
                        </div>
                        
                        <div id="calibrationDetails" class="hidden grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label for="last_calibration_date" class="block text-sm font-medium text-gray-700">Last Calibration Date</label>
                                <input type="date" id="last_calibration_date" name="last_calibration_date" 
                                       class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Calibration Frequency</label>
                                <div class="flex space-x-2">
                                    <select name="calibration_frequency_years" id="calibration_frequency_years" class="mt-1 block w-1/2 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                        <% for(let i=0; i<=10; i++) { %>
                                            <option value="<%= i %>"><%= i %> Year<%= i !== 1 ? 's' : '' %></option>
                                        <% } %>
                                    </select>
                                    <select name="calibration_frequency_months" id="calibration_frequency_months" class="mt-1 block w-1/2 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                        <% for(let i=0; i<12; i++) { %>
                                            <option value="<%= i %>"><%= i %> Month<%= i !== 1 ? 's' : '' %></option>
                                        <% } %>
                                    </select>
                                </div>
                            </div>
                            <div>
                                <label for="next_calibration_date" class="block text-sm font-medium text-gray-700">Next Calibration Date</label>
                                <input type="date" id="next_calibration_date" name="next_calibration_date" readonly
                                       class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm bg-gray-100 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                            </div>
                            <div class="md:col-span-2">
                                <label for="calibration_notes" class="block text-sm font-medium text-gray-700">Calibration Notes</label>
                                <textarea id="calibration_notes" name="calibration_notes" rows="2" 
                                          placeholder="Special calibration requirements or notes..." 
                                          class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"></textarea>
                            </div>
                        </div>
                    </div>

                    <!-- Software Section -->
                    <div id="softwareSection" class="hidden">
    <h4 class="text-md font-medium text-gray-800 mb-3">ðŸ’» Software Information</h4>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
            <label for="version_number" class="block text-sm font-medium text-gray-700">Version Number</label>
            <input type="text" id="version_number" name="version_number"
                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
        </div>
        <div>
            <label for="software_license_type" class="block text-sm font-medium text-gray-700">License Type</label>
            <select name="software_license_type" id="software_license_type"
                    class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                    onchange="showLicenseTypeDetails()">
                <option value="">Select Type</option>
                <option value="free">Free</option>
                <option value="perpetual">Perpetual License</option>
                <option value="subscription">Subscription License</option>
                <option value="concurrent">Concurrent License</option>
                <option value="floating">Floating/Network License</option>
                <option value="node_locked">Node-Locked License</option>
                <option value="trial_educational">Trial/Educational License</option>
            </select>
            <div id="licenseTypeDetails" class="mt-2 hidden">
                <div id="licenseTypeDescription" class="text-xs text-gray-700 bg-gray-100 rounded p-2 mb-2"></div>
            </div>
        </div>
    </div>
    
    <!-- License Details: Only for Licensed -->
    <div id="licenseDetails" class="hidden grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
        <div>
            <label for="license_start_date" class="block text-sm font-medium text-gray-700">License Start Date</label>
            <input type="date" id="license_start_date" name="license_start_date"
                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
        </div>
        <div>
            <label class="block text-sm font-medium text-gray-700">Renewal Frequency</label>
            <div class="flex space-x-2">
                <select name="renewal_frequency_years" id="renewal_frequency_years"
                        class="mt-1 block w-1/2 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    <% for(let i=0; i<=10; i++) { %>
                        <option value="<%= i %>"><%= i %> Year<%= i !== 1 ? 's' : '' %></option>
                    <% } %>
                </select>
                <select name="renewal_frequency_months" id="renewal_frequency_months"
                        class="mt-1 block w-1/2 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    <% for(let i=0; i<12; i++) { %>
                        <option value="<%= i %>"><%= i %> Month<%= i !== 1 ? 's' : '' %></option>
                    <% } %>
                </select>
            </div>
        </div>
        <div>
            <label for="next_renewal_date" class="block text-sm font-medium text-gray-700">Next Renewal Date</label>
            <input type="date" id="next_renewal_date" name="next_renewal_date" readonly
                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm bg-gray-100 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
        </div>
    </div>
</div>

                    <div class="flex justify-end">
                        <button type="submit" class="px-6 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            <i class="fas fa-save mr-2"></i>Save Product
                        </button>
                    </div>
                </form>
            </div>
        </div>
        
        <!-- Products List -->
        <div class="bg-white shadow rounded-lg">
            <div class="px-4 py-5 sm:p-6">
                <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">
                    Complete Product Inventory
                </h3>
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Product Details
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Asset Type
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Serial/Model
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Total Stock
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Currently Assigned
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Available
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Calibration
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Added By
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Added Date
                                </th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            <% if (products && products.length > 0) { %>
                                <% products.forEach(product => { %>
                                    <tr>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="text-sm font-medium text-gray-900">
                                                <%= product.product_name %>
                                            </div>
                                            <div class="text-sm text-gray-500">
                                                <%= product.product_category %>
                                            </div>
                                            <% if (product.description) { %>
                                                <div class="text-xs text-gray-400 truncate max-w-xs">
                                                    <%= product.description.substring(0, 50) %>...
                                                </div>
                                            <% } %>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                                                <%= product.asset_type %>
                                            </span>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            <div><strong>SN:</strong> <%= product.serial_number || 'N/A' %></div>
                                            <div><strong>Model:</strong> <%= product.model_number || 'N/A' %></div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            <span class="font-semibold"><%= (product.quantity || 0) + (product.currently_assigned || 0) %></span>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            <span class="font-semibold text-yellow-600"><%= product.currently_assigned || 0 %></span>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            <span class="font-semibold text-green-600"><%= product.quantity || 0 %></span>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            <% if (product.calibration_required) { %>
                                                <% if (product.calibration_status === 'Overdue') { %>
                                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
                                                        Overdue
                                                    </span>
                                                <% } else if (product.calibration_status === 'Due Soon') { %>
                                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
                                                        Due Soon
                                                    </span>
                                                <% } else { %>
                                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                                        Current
                                                    </span>
                                                <% } %>
                                                <div class="text-xs text-gray-400">
                                                    <%= product.calibration_frequency || 'N/A' %>
                                                </div>
                                            <% } else { %>
                                                <span class="text-gray-400">Not Required</span>
                                            <% } %>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            <%= product.added_by_name || 'System' %>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            <%= new Date(product.added_at).toLocaleDateString() %>
                                        </td>
                                    </tr>
                                <% }); %>
                            <% } else { %>
                                <tr>
                                    <td colspan="9" class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center">
                                        No products found
                                    </td>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </main>

    <script>
    function openModal() {
        document.getElementById('productModal').classList.remove('hidden');
    }

    function closeModal() {
        document.getElementById('productModal').classList.add('hidden');
    }

    // Close modal when clicking outside
    window.onclick = function(event) {
        const modal = document.getElementById('productModal');
        if (event.target === modal) {
            closeModal();
        }
    }

    function toggleCalibrationFields() {
        const category = document.getElementById('productCategory').value;
        const calibrationSection = document.getElementById('calibrationSection');
        if (category === 'hardware') {
            calibrationSection.classList.remove('hidden');
        } else {
            calibrationSection.classList.add('hidden');
            document.getElementById('requiresCalibration').checked = false;
            document.getElementById('calibrationDetails').classList.add('hidden');
        }
        toggleSoftwareFields(); // Call software toggle here as well
    }

    function toggleCalibrationDetails() {
        const requiresCalibration = document.getElementById('requiresCalibration').checked;
        const calibrationDetails = document.getElementById('calibrationDetails');
        if (requiresCalibration) {
            calibrationDetails.classList.remove('hidden');
        } else {
            calibrationDetails.classList.add('hidden');
        }
    }

    // --- Software Section ---
    function toggleSoftwareFields() {
        const category = document.getElementById('productCategory').value;
        const typeDiv = document.getElementById('typeDiv');
        const modelDiv = document.getElementById('modelDiv');
        const softwareSection = document.getElementById('softwareSection');
        if (category === 'software') {
            // Hide Type and Model fields
            typeDiv.classList.add('hidden');
            modelDiv.classList.add('hidden');
            // Show Software Section
            softwareSection.classList.remove('hidden');
        } else {
            // Show Type and Model fields
            typeDiv.classList.remove('hidden');
            modelDiv.classList.remove('hidden');
            // Hide Software Section
            softwareSection.classList.add('hidden');
        }
    }

    function toggleSoftwareDetails() {
        const requiresLicense = document.getElementById('requiresLicense').checked;
        const softwareDetails = document.getElementById('softwareDetails');
        if (requiresLicense) {
            softwareDetails.classList.remove('hidden');
        } else {
            softwareDetails.classList.add('hidden');
        }
    }

    function toggleLicenseDetails() {
        const licenseType = document.getElementById('software_license_type').value;
        const licenseDetails = document.getElementById('licenseDetails');
        if (licenseType === 'licensed') {
            licenseDetails.classList.remove('hidden');
        } else {
            licenseDetails.classList.add('hidden');
        }
        showLicenseDescription(); // Update description when license type changes
    }

    function showLicenseDescription() {
        const descriptions = {
            licensed: "A license purchased for a specific user or device.",
            free: "No license required; software is free to use.",
            perpetual: "A one-time purchase license that does not expire.",
            subscription: "A license that is valid for a set period and requires renewal.",
            concurrent: "Allows a set number of users to use the software at the same time.",
            floating: "A license shared across a network, available to any device but limited by the number of licenses.",
            node_locked: "Tied to a specific device or hardware.",
            trial_educational: "A temporary or educational-use license, often with restrictions."
        };
        const select = document.getElementById('software_license_type');
        const descBox = document.getElementById('licenseTypeDescription');
        const detailsBox = document.getElementById('licenseTypeDetails');
        const value = select.value;
        if (descriptions[value]) {
            descBox.textContent = descriptions[value];
            detailsBox.classList.remove('hidden');
        } else {
            descBox.textContent = '';
            detailsBox.classList.add('hidden');
        }
    }

    // --- Calibration: Auto-calculate next calibration date ---
    function calculateNextCalibrationDate() {
        const lastDateInput = document.getElementById('last_calibration_date');
         const yearsInput = document.getElementById('calibration_frequency_years');
        const monthsInput = document.getElementById('calibration_frequency_months');
        const nextDateInput = document.getElementById('next_calibration_date');
        if (!lastDateInput || !monthsInput || !yearsInput || !nextDateInput) return;

        const lastDate = lastDateInput.value;
        const months = parseInt(monthsInput.value, 10) || 0;
        const years = parseInt(yearsInput.value, 10) || 0;
        const totalMonths = months + (years * 12);

        if (lastDate && totalMonths > 0) {
            const date = new Date(lastDate);
            date.setMonth(date.getMonth() + totalMonths);
            const nextDate = date.toISOString().split('T')[0];
            nextDateInput.value = nextDate;
        } else {
            nextDateInput.value = '';
        }
    }

    // Auto-calculate next renewal date
    function calculateNextRenewalDate() {
        const startInput = document.getElementById('license_start_date');
        const yearsInputRenewal = document.getElementById('renewal_frequency_years');
        const monthsInputRenewal = document.getElementById('renewal_frequency_months');
        const nextInput = document.getElementById('next_renewal_date');
        if (!startInput || !monthsInputRenewal || !yearsInputRenewal || !nextInput) return;

        const startDate = startInput.value;
        const years = parseInt(yearsInputRenewal.value, 10) || 0;
        const months = parseInt(monthsInputRenewal.value, 10) || 0;
        const totalMonths = months + (years * 12);

        if (startDate && totalMonths > 0) {
            let date = new Date(startDate);
            date.setMonth(date.getMonth() + totalMonths);
            nextInput.value = date.toISOString().split('T')[0];
        } else {
            nextInput.value = '';
        }
    }

    document.addEventListener('DOMContentLoaded', function() {
        document.getElementById('productCategory').addEventListener('change', function() {
            toggleCalibrationFields();
            toggleSoftwareFields();
            updateTypePlaceholder(); // Add this line
        });
        updateTypePlaceholder(); // Set initial placeholder

        // Set max date for all date inputs in the form
        const today = new Date().toISOString().split('T')[0];
        const dateInputs = document.querySelectorAll('input[type="date"]');
        dateInputs.forEach(input => {
            input.setAttribute('max', today);
        });

        // Calibration auto-calc
        const lastCalInput = document.getElementById('last_calibration_date');
        const monthsInput = document.getElementById('calibration_frequency_months');
        const yearsInput = document.getElementById('calibration_frequency_years');
        if (lastCalInput && monthsInput && yearsInput) {
    lastCalInput.addEventListener('change', calculateNextCalibrationDate);
    monthsInput.addEventListener('change', calculateNextCalibrationDate);
    yearsInput.addEventListener('change', calculateNextCalibrationDate);
        }

        // Renewal auto-calc
        const startInput = document.getElementById('license_start_date');
        const monthsInputRenewal = document.getElementById('renewal_frequency_months');
        const yearsInputRenewal = document.getElementById('renewal_frequency_years');
        if (startInput && monthsInputRenewal && yearsInputRenewal) {
            startInput.addEventListener('change', calculateNextRenewalDate);
            monthsInputRenewal.addEventListener('change', calculateNextRenewalDate);
            yearsInputRenewal.addEventListener('change', calculateNextRenewalDate);
        }
    });

    // --- License Type Description (already present) ---
    function showLicenseTypeDetails() {
        const descriptions = {
            licensed: "A license purchased for a specific user or device.",
            free: "No license required; software is free to use.",
            perpetual: "A one-time purchase license that does not expire.",
            subscription: "A license that is valid for a set period and requires renewal.",
            concurrent: "Allows a set number of users to use the software at the same time.",
            floating: "A license shared across a network, available to any device but limited by the number of licenses.",
            node_locked: "Tied to a specific device or hardware.",
            trial_educational: "A temporary or educational-use license, often with restrictions."
        };
        const select = document.getElementById('software_license_type');
        const detailsBox = document.getElementById('licenseTypeDetails');
        const descBox = document.getElementById('licenseTypeDescription');
        const licenseDetails = document.getElementById('licenseDetails');
        const value = select.value;
        if (descriptions[value]) {
            descBox.textContent = descriptions[value];
            detailsBox.classList.remove('hidden');
        } else {
            descBox.textContent = '';
            detailsBox.classList.add('hidden');
        }
        // Show license details only for "subscription"
        if (value === 'subscription') {
            licenseDetails.classList.remove('hidden');
        } else {
            licenseDetails.classList.add('hidden');
        }
    }

    // --- Product Type Placeholder ---
const typePlaceholders = {
    hardware: "Enter (e.g., Laptop, Desktop, Printer etc)",
    software: "Enter (e.g., Antivirus, Office Suite, IDE etc)",
    test_equipment: "Enter (e.g.,multimeter, HIL)",
    tooling: "Enter (e.g., fixers, jigs , hand tools etc)",
    consumables: "Enter (e.g., fuses, cables, small components regurlarly replaced etc)",
    measuring_instrument: "Enter (e.g., Calibrated euipment like temparature or voltage sensors etc)",
    embedded_devices: "Enter (e.g., Controllers, microcontrollers, ECUs etc)",
    lab_equipment: "Enter (e.g.,Environmental Chambers, load banks,soldering stations etc)",
    prototypes: "Enter (e.g., Custom-built experimental devices)",
    accessories: "Enter (e.g., Add-ons like connectors, probes, adaptors etc)",
    network_equipment: "Enter (e.g., Routers, Switches, Access Points etc)",
    miscellaneous: "Enter (e.g., Other, Custom Item)"
};

    // Add more as needed


function updateTypePlaceholder() {
    const category = document.getElementById('productCategory').value.trim().toLowerCase();
    const typeInput = document.getElementById('type');
    typeInput.placeholder = typePlaceholders[category] || "Enter type";
}

document.addEventListener('DOMContentLoaded', function() {
    // ...existing code...
    document.getElementById('productCategory').addEventListener('change', function() {
        toggleCalibrationFields();
        toggleSoftwareFields();
        updateTypePlaceholder(); // Add this line
    });
    updateTypePlaceholder(); // Set initial placeholder
    // ...existing code...
});
    </script>
</body>
</html>
