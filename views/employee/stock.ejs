
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stock - Product Management System</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body class="bg-gray-50">
    <%- include('../partials/navbar') %>
    
    <main class="ml-64 p-6">
        <%- include('../partials/messages') %>
        
        <% if (typeof error !== 'undefined' && error) { %>
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
                <%= error %>
            </div>
        <% } %>
        
        <div class="mb-8 flex justify-between items-center">
            <div>
                <h1 class="text-3xl font-bold text-gray-900">Available Stock</h1>
                <p class="text-gray-600">View available products in inventory</p>
            </div>
            <button onclick="window.location.reload()" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                <i class="fas fa-sync-alt mr-2"></i>Refresh Stock
            </button>
        </div>

        <!-- Search and Filter -->
        <div class="bg-white shadow rounded-lg mb-6">
            <div class="px-4 py-5 sm:p-6">
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                        <label for="asset-type-filter" class="block text-sm font-medium text-gray-700">Asset Type</label>
                        <select id="asset-type-filter" class="mt-1 block w-full px-3 py-2 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                            <option value="">All Types</option>
                            <option value="Hardware">Hardware</option>
                            <option value="Software">Software</option>
                            <option value="License">License</option>
                            <option value="Laptop">Laptop</option>
                            <option value="Misc">Miscellaneous</option>
                        </select>
                    </div>
                    <div>
                        <label for="search-input" class="block text-sm font-medium text-gray-700">Search</label>
                        <input type="text" id="search-input" placeholder="Search products..." 
                               class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    </div>
                    <div class="flex items-end">
                        <button id="search-btn" class="w-full px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            <i class="fas fa-search mr-2"></i>Search
                        </button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Stock Table -->
        <div class="bg-white shadow rounded-lg">
            <div class="px-4 py-5 sm:p-6">
                <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">
                    Available Products (<span id="total-products"><%= (products && products.length) || 0 %></span> items)
                </h3>
                <div class="overflow-x-auto overflow-y-auto max-h-screen">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50 sticky top-0 z-10">
                            <tr>
                                <th class="pl-6 pr-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-2/5">
                                    Product Name
                                </th>
                                <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/6">
                                    Action
                                </th>
                                <th class="px-2 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/12">
                                    Asset Type
                                </th>
                                <th class="px-2 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/12">
                                    Category
                                </th>
                                <th class="pl-4 pr-2 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/12">
                                    Model
                                </th>
                                <th class="pl-2 pr-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider w-1/4">
                                    Availability Status
                                </th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200" id="products-table">
                            <!-- Products will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
                
                <!-- Pagination Controls -->
                <div class="flex items-center justify-between px-4 py-3 bg-white border-t border-gray-200 sm:px-6">
                    <div class="flex justify-between flex-1 sm:hidden">
                        <button id="prev-mobile" class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                            Previous
                        </button>
                        <button id="next-mobile" class="relative ml-3 inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                            Next
                        </button>
                    </div>
                    <div class="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
                        <div>
                            <p class="text-sm text-gray-700">
                                Showing <span id="showing-from">1</span> to <span id="showing-to">15</span> of <span id="total-count">0</span> results
                            </p>
                        </div>
                        <div>
                            <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                                <button id="prev-desktop" class="relative inline-flex items-center px-2 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-l-md hover:bg-gray-50">
                                    <span class="sr-only">Previous</span>
                                    <i class="fas fa-chevron-left"></i>
                                </button>
                                <div id="page-numbers" class="flex">
                                    <!-- Page numbers will be populated by JavaScript -->
                                </div>
                                <button id="next-desktop" class="relative inline-flex items-center px-2 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-r-md hover:bg-gray-50">
                                    <span class="sr-only">Next</span>
                                    <i class="fas fa-chevron-right"></i>
                                </button>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Product data for JavaScript -->
    <script id="products-data" type="application/json">
        <%- JSON.stringify(products || []) %>
    </script>

    <script>
        // Pagination variables
        let allProducts = [];
        let filteredProducts = [];
        let currentPage = 1;
        const itemsPerPage = 15;

        // Initialize with server data
        document.addEventListener('DOMContentLoaded', function() {
            try {
                const productsData = document.getElementById('products-data').textContent;
                allProducts = JSON.parse(productsData);
            } catch (e) {
                console.error('Error parsing products data:', e);
                allProducts = [];
            }
            filteredProducts = [...allProducts];
            displayProducts();
            setupPagination();
            

        });

        // Pagination functions
        function displayProducts() {
            const tbody = document.getElementById('products-table');
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const pageProducts = filteredProducts.slice(startIndex, endIndex);
            
            tbody.innerHTML = '';
            
            if (pageProducts.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="6" class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center">
                            <div class="text-gray-400">
                                <i class="fas fa-box-open text-4xl mb-2"></i>
                                <p>No products found</p>
                            </div>
                        </td>
                    </tr>
                `;
                return;
            }
            
            pageProducts.forEach(product => {
                const row = document.createElement('tr');
                const isAvailable = getAvailabilityStatus(product);
                const availableQty = (product.quantity || 0) - (product.assigned_quantity || 0);
                
                // Add fading class for unavailable products
                if (!isAvailable.available) {
                    row.classList.add('opacity-60', 'bg-gray-50');
                }
                
                row.innerHTML = `
                    <td class="pl-6 pr-4 py-4">
                        <div class="text-sm font-medium ${isAvailable.available ? 'text-gray-900' : 'text-gray-500'} break-words leading-tight">
                            ${product.product_name || 'N/A'}
                        </div>
                        ${product.serial_number ? `<div class="text-xs text-gray-400 mt-1">S/N: ${product.serial_number}</div>` : ''}
                    </td>
                    <td class="px-4 py-4 whitespace-nowrap text-sm font-medium">
                        <button class="request-btn inline-flex items-center px-3 py-1 border border-transparent text-xs leading-4 font-medium rounded-md ${isAvailable.available ? 'text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 cursor-pointer' : 'text-gray-400 bg-gray-200 cursor-not-allowed opacity-50'}" 
                            data-product-id="${product.product_id}" 
                            data-product-name="${product.product_name.replace(/"/g, '&quot;')}" 
                            data-available-qty="${availableQty}" 
                            data-available="${isAvailable.available}" 
                            ${!isAvailable.available ? 'disabled' : ''}>
                            <i class="fas fa-plus mr-1"></i>Request
                        </button>
                    </td>
                    <td class="px-2 py-4 whitespace-nowrap text-sm text-gray-500">
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${isAvailable.available ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-600'}">
                            ${product.asset_type || 'N/A'}
                        </span>
                    </td>
                    <td class="px-2 py-4 whitespace-nowrap text-sm ${isAvailable.available ? 'text-gray-500' : 'text-gray-400'}">
                        ${product.product_category || 'N/A'}
                    </td>
                    <td class="pl-4 pr-2 py-4 whitespace-nowrap text-sm ${isAvailable.available ? 'text-gray-500' : 'text-gray-400'}">
                        ${product.model_number || 'N/A'}
                    </td>
                    <td class="pl-2 pr-6 py-4">
                        <div class="text-sm text-right">
                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${isAvailable.available ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                                ${isAvailable.available ? 'Available' : 'Not Available'}
                            </span>
                            ${!isAvailable.available && isAvailable.userInfo ? 
                                `<div class="text-xs text-gray-500 mt-1 text-right break-words leading-tight max-w-xs ml-auto">
                                    <div class="font-medium text-red-600">Currently assigned to:</div>
                                    <div class="text-gray-600">${isAvailable.userInfo}</div>
                                </div>` : ''}
                        </div>
                    </td>
                `;
                tbody.appendChild(row);
            });
            
            // Add event listeners to request buttons
            document.querySelectorAll('.request-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    if (this.dataset.available === 'true') {
                        const productId = this.dataset.productId;
                        const productName = this.dataset.productName;
                        const availableQty = this.dataset.availableQty;
                        openRequestModal(productId, productName, availableQty);
                    }
                });
            });
            
            updatePaginationInfo();
        }

        function setupPagination() {
            // Setup pagination event listeners
            document.getElementById('prev-mobile').addEventListener('click', () => changePage(currentPage - 1));
            document.getElementById('next-mobile').addEventListener('click', () => changePage(currentPage + 1));
            document.getElementById('prev-desktop').addEventListener('click', () => changePage(currentPage - 1));
            document.getElementById('next-desktop').addEventListener('click', () => changePage(currentPage + 1));
            
            updatePaginationControls();
        }

        function changePage(page) {
            const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);
            if (page < 1 || page > totalPages) return;
            
            currentPage = page;
            displayProducts();
            updatePaginationControls();
        }

        function updatePaginationInfo() {
            const startIndex = (currentPage - 1) * itemsPerPage + 1;
            const endIndex = Math.min(currentPage * itemsPerPage, filteredProducts.length);
            
            document.getElementById('showing-from').textContent = filteredProducts.length > 0 ? startIndex : 0;
            document.getElementById('showing-to').textContent = endIndex;
            document.getElementById('total-count').textContent = filteredProducts.length;
            document.getElementById('total-products').textContent = filteredProducts.length;
        }

        function updatePaginationControls() {
            const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);
            
            // Update button states
            const prevButtons = [document.getElementById('prev-mobile'), document.getElementById('prev-desktop')];
            const nextButtons = [document.getElementById('next-mobile'), document.getElementById('next-desktop')];
            
            prevButtons.forEach(btn => {
                btn.disabled = currentPage === 1;
                btn.classList.toggle('opacity-50', currentPage === 1);
                btn.classList.toggle('cursor-not-allowed', currentPage === 1);
            });
            
            nextButtons.forEach(btn => {
                btn.disabled = currentPage === totalPages || totalPages === 0;
                btn.classList.toggle('opacity-50', currentPage === totalPages || totalPages === 0);
                btn.classList.toggle('cursor-not-allowed', currentPage === totalPages || totalPages === 0);
            });
            
            // Update page numbers
            const pageNumbersContainer = document.getElementById('page-numbers');
            pageNumbersContainer.innerHTML = '';
            
            const maxVisiblePages = 5;
            let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
            let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
            
            if (endPage - startPage + 1 < maxVisiblePages) {
                startPage = Math.max(1, endPage - maxVisiblePages + 1);
            }
            
            for (let i = startPage; i <= endPage; i++) {
                const pageButton = document.createElement('button');
                pageButton.className = `relative inline-flex items-center px-4 py-2 text-sm font-medium border ${
                    i === currentPage 
                        ? 'z-10 bg-indigo-50 border-indigo-500 text-indigo-600' 
                        : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
                }`;
                pageButton.textContent = i;
                pageButton.addEventListener('click', () => changePage(i));
                pageNumbersContainer.appendChild(pageButton);
            }
        }

        // Search and filter functionality with error handling
        document.getElementById('search-btn').addEventListener('click', filterProducts);
        document.getElementById('asset-type-filter').addEventListener('change', filterProducts);
        document.getElementById('search-input').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                filterProducts();
            }
        });

        function filterProducts() {
            const assetType = document.getElementById('asset-type-filter').value;
            const search = document.getElementById('search-input').value.toLowerCase();
            
            filteredProducts = allProducts.filter(product => {
                const matchesAssetType = !assetType || product.asset_type === assetType;
                const matchesSearch = !search || 
                    product.product_name.toLowerCase().includes(search) ||
                    product.product_category.toLowerCase().includes(search) ||
                    product.model_number.toLowerCase().includes(search);
                
                return matchesAssetType && matchesSearch;
            });
            
            currentPage = 1; // Reset to first page after filtering
            displayProducts();
            updatePaginationControls();
        }

        function updateTable(products) {
            allProducts = products;
            filteredProducts = [...allProducts];
            currentPage = 1;
            displayProducts();
            updatePaginationControls();
        }

        function getAvailabilityStatus(product) {
            const totalQty = product.quantity || 0;
            const assignedQty = product.assigned_quantity || 0;
            const availableQty = totalQty - assignedQty;
            
            if (availableQty > 0 && (!product.current_users || product.current_users.trim() === '')) {
                return {
                    available: true,
                    userInfo: null
                };
            } else {
                return {
                    available: false,
                    userInfo: product.current_users || 'Currently assigned to another user'
                };
            }
        }
        
        function openRequestModal(productId, productName, availableQty) {
            // Create modal HTML
            const modalHTML = `
                <div id="requestModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
                    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
                        <div class="mt-3">
                            <h3 class="text-lg font-medium text-gray-900 mb-4">Request Product</h3>
                            <form action="/employee/request-product" method="POST" onsubmit="handleFormSubmit(event)">
                                <input type="hidden" name="product_id" value="${productId}">
                                
                                <div class="mb-4">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Product <span class="text-red-500">*</span></label>
                                    <input type="text" value="${productName}" disabled class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50">
                                </div>
                                
                                <div class="mb-4">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Return Date <span class="text-red-500">*</span></label>
                                    <input type="date" name="return_date" required 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                                </div>
                                
                                <div class="mb-4">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Purpose</label>
                                    <textarea name="purpose" rows="3" placeholder="Describe the purpose for this request..."
                                              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"></textarea>
                                </div>
                                
                                <div class="flex justify-end space-x-3">
                                    <button type="button" onclick="closeRequestModal()" 
                                            class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300">
                                        Cancel
                                    </button>
                                    <button type="submit" 
                                            class="px-4 py-2 text-sm font-medium text-white bg-indigo-600 rounded-md hover:bg-indigo-700">
                                        Submit Request
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            `;
            
            // Add modal to page
            document.body.insertAdjacentHTML('beforeend', modalHTML);
        }
        
        function closeRequestModal() {
            const modal = document.getElementById('requestModal');
            if (modal) {
                modal.remove();
            }
        }
        
        // Close modal when clicking outside
        document.addEventListener('click', function(event) {
            const modal = document.getElementById('requestModal');
            if (modal && event.target === modal) {
                closeRequestModal();
            }
        });
        
        function handleFormSubmit(event) {
            // Show loading state
            const submitBtn = event.target.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i>Submitting...';
            submitBtn.disabled = true;
            
            // Let the form submit, then redirect back to stock page to show updated availability
            setTimeout(() => {
                window.location.href = '/employee/stock'; // Redirect back to stock page
            }, 1000);
        }
    </script>
</body>
</html>
