name: Database Operations

on:
  workflow_dispatch:
    inputs:
      operation:
        description: 'Database operation to perform'
        required: true
        default: 'setup'
        type: choice
        options:
        - setup
        - migrate
        - backup
        - restore
        - reset
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

env:
  PROJECT_ID: 'mqi-ims'
  INSTANCE_NAME: 'mqi-ims-db'
  
jobs:
  # Check required secrets before database operations
  check-secrets:
    name: 🔍 Validate Required Secrets
    runs-on: ubuntu-latest
    outputs:
      secrets-available: ${{ steps.check.outputs.secrets-available }}
    
    steps:
    - name: 📋 Check for required secrets
      id: check
      run: |
        echo "Checking for required GitHub secrets..."
        if [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
          echo "❌ Missing GCP_SA_KEY secret"
          echo "secrets-available=false" >> $GITHUB_OUTPUT
          echo "::error::Missing required secret: GCP_SA_KEY"
          echo "::error::Please add Google Cloud Service Account key as GCP_SA_KEY secret"
          echo "::error::Visit: https://github.com/${{ github.repository }}/settings/secrets/actions"
          exit 1
        else
          echo "✅ GCP_SA_KEY secret is configured"
          echo "secrets-available=true" >> $GITHUB_OUTPUT
        fi

  database-operations:
    name: 🗄️ Database Operations
    runs-on: ubuntu-latest
    needs: [check-secrets]
    if: needs.check-secrets.outputs.secrets-available == 'true'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔐 Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        
    - name: ☁️ Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        
    - name: 🔧 Setup environment variables
      run: |
        case "${{ github.event.inputs.environment }}" in
          "development")
            echo "DB_USER=${{ secrets.DEV_DB_USER }}" >> $GITHUB_ENV
            echo "DB_PASSWORD=${{ secrets.DEV_DB_PASSWORD }}" >> $GITHUB_ENV
            echo "DB_NAME=${{ secrets.DEV_DB_NAME }}" >> $GITHUB_ENV
            ;;
          "staging")
            echo "DB_USER=${{ secrets.STAGING_DB_USER }}" >> $GITHUB_ENV
            echo "DB_PASSWORD=${{ secrets.STAGING_DB_PASSWORD }}" >> $GITHUB_ENV
            echo "DB_NAME=${{ secrets.STAGING_DB_NAME }}" >> $GITHUB_ENV
            ;;
          "production")
            echo "DB_USER=${{ secrets.PROD_DB_USER }}" >> $GITHUB_ENV
            echo "DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}" >> $GITHUB_ENV
            echo "DB_NAME=${{ secrets.PROD_DB_NAME }}" >> $GITHUB_ENV
            ;;
        esac
        echo "DB_HOST=/cloudsql/${{ env.PROJECT_ID }}:us-central1:${{ env.INSTANCE_NAME }}" >> $GITHUB_ENV
        
    - name: 🗄️ Database Setup
      if: github.event.inputs.operation == 'setup'
      run: |
        echo "🚀 Setting up database schema..."
        node setup-db.js
        echo "✅ Database setup completed"
        
    - name: 🔄 Database Migration
      if: github.event.inputs.operation == 'migrate'
      run: |
        echo "🚀 Running database migrations..."
        if [ -f "scripts/migrate-database.sh" ]; then
          chmod +x scripts/migrate-database.sh
          ./scripts/migrate-database.sh
        else
          echo "Migration script not found"
          exit 1
        fi
        echo "✅ Database migration completed"
        
    - name: 💾 Database Backup
      if: github.event.inputs.operation == 'backup'
      run: |
        echo "🚀 Creating database backup..."
        BACKUP_FILE="backup-$(date +%Y%m%d-%H%M%S).sql"
        
        gcloud sql export sql ${{ env.INSTANCE_NAME }} \
          gs://${{ env.PROJECT_ID }}-db-backups/$BACKUP_FILE \
          --database=${{ env.DB_NAME }} \
          --project=${{ env.PROJECT_ID }}
          
        echo "✅ Database backup created: $BACKUP_FILE"
        
    - name: 🔄 Database Restore
      if: github.event.inputs.operation == 'restore'
      run: |
        echo "🚀 Restoring database from backup..."
        echo "⚠️ This operation requires manual backup file selection"
        echo "Please specify the backup file to restore from"
        # This would need additional input for backup file selection
        
    - name: 🔄 Database Reset
      if: github.event.inputs.operation == 'reset'
      run: |
        echo "⚠️ WARNING: This will reset the entire database!"
        echo "This operation is only allowed in development environment"
        
        if [ "${{ github.event.inputs.environment }}" != "development" ]; then
          echo "❌ Database reset is only allowed in development environment"
          exit 1
        fi
        
        echo "🚀 Resetting database..."
        # Drop and recreate database
        echo "DROP DATABASE IF EXISTS ${{ env.DB_NAME }};" | gcloud sql connect ${{ env.INSTANCE_NAME }} --user=${{ env.DB_USER }}
        echo "CREATE DATABASE ${{ env.DB_NAME }};" | gcloud sql connect ${{ env.INSTANCE_NAME }} --user=${{ env.DB_USER }}
        
        # Run setup script
        node setup-db.js
        
        echo "✅ Database reset completed"
