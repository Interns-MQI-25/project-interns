<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RDT Lab Calendar - Marquardt India Pvt. Ltd.</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/responsive.css">
    <style>
        .calendar-grid { display: grid; grid-template-columns: repeat(7, 1fr); }
        .calendar-day { min-height: 120px; position: relative; }
        .today { background-color: #fef3c7; }
        .other-month { color: #9ca3af; background-color: #f9fafb; }
    </style>
</head>
<body class="bg-gray-50">
    <%- include('../partials/navbar') %>
    
    <main class="ml-0 lg:ml-64 flex flex-col h-screen">
        <div class="flex-shrink-0 p-4 sm:p-6 bg-white border-b border-gray-200 shadow-sm">
            <%- include('../partials/messages') %>
            
            <div class="flex justify-between items-center mb-4">
                <div>
                    <h1 class="text-2xl font-bold text-gray-900">RDT Lab Calendar</h1>
                    <p class="text-gray-600">Book Functional Safety Test labs with HIL instruments</p>
                </div>
                <button onclick="showNewBookingModal()" class="px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 shadow-sm hover:shadow-md text-white" style="background-color: #009A9A;" onmouseover="this.style.backgroundColor='#007A7A'" onmouseout="this.style.backgroundColor='#009A9A'">
                    <i class="fas fa-plus mr-2"></i>New Booking
                </button>
            </div>

            <div class="flex flex-wrap gap-4 items-center">
                <div class="flex items-center space-x-2">
                    <label class="text-sm font-medium text-gray-700">Select Lab:</label>
                    <select id="labSelector" onchange="loadLabBookings()" class="border-gray-300 rounded-lg shadow-sm focus:ring-primary-500 focus:border-primary-500 transition-all duration-200">
                        <option value="">All Labs</option>
                    </select>
                </div>
                
                <div class="flex items-center space-x-2">
                    <button onclick="previousMonth()" class="p-2 text-gray-600 hover:text-primary-600 hover:bg-primary-50 rounded-lg transition-all duration-200">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <span id="currentMonth" class="text-lg font-semibold text-gray-900 min-w-[200px] text-center"></span>
                    <button onclick="nextMonth()" class="p-2 text-gray-600 hover:text-primary-600 hover:bg-primary-50 rounded-lg transition-all duration-200">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>

                <div class="flex items-center space-x-4 text-sm">
                    <div class="flex items-center">
                        <div class="w-3 h-3 bg-primary-600 rounded mr-2"></div>
                        <span>Booked</span>
                    </div>
                    <div class="flex items-center">
                        <div class="w-3 h-3 bg-red-500 rounded mr-2"></div>
                        <span>Overdue</span>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="flex-1 overflow-hidden">
            <div class="h-full overflow-auto">
                <div class="min-w-[800px]">
                    <div class="calendar-grid bg-gray-50 border-b border-gray-200 sticky top-0 z-20">
                        <div class="p-3 text-center font-medium text-gray-700 border-r border-gray-200">Sun</div>
                        <div class="p-3 text-center font-medium text-gray-700 border-r border-gray-200">Mon</div>
                        <div class="p-3 text-center font-medium text-gray-700 border-r border-gray-200">Tue</div>
                        <div class="p-3 text-center font-medium text-gray-700 border-r border-gray-200">Wed</div>
                        <div class="p-3 text-center font-medium text-gray-700 border-r border-gray-200">Thu</div>
                        <div class="p-3 text-center font-medium text-gray-700 border-r border-gray-200">Fri</div>
                        <div class="p-3 text-center font-medium text-gray-700">Sat</div>
                    </div>
                    
                    <div id="calendarBody" class="calendar-grid">
                        <!-- Calendar days will be generated by JavaScript -->
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- New Booking Modal -->
    <div id="newBookingModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
        <div class="relative top-10 mx-auto p-5 border w-full max-w-2xl shadow-lg rounded-md bg-white">
            <div class="mt-3">
                <h3 class="text-lg font-medium text-gray-900 mb-4">Book FST Lab</h3>
                <form id="bookingForm" class="space-y-4">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Lab *</label>
                            <select id="modalLabSelector" required class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-primary-500 focus:border-primary-500 transition-all duration-200">
                                <option value="">Select a lab</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Project Name *</label>
                            <input type="text" id="projectName" required class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-primary-500 focus:border-primary-500 transition-all duration-200">
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Project Description</label>
                        <textarea id="projectDescription" rows="3" class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-primary-500 focus:border-primary-500 transition-all duration-200"></textarea>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Start Date *</label>
                            <input type="date" id="startDate" required class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-primary-500 focus:border-primary-500 transition-all duration-200">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">End Date *</label>
                            <input type="date" id="endDate" required class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-primary-500 focus:border-primary-500 transition-all duration-200">
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Testing Purpose</label>
                        <input type="text" id="testingPurpose" class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-primary-500 focus:border-primary-500 transition-all duration-200" placeholder="e.g., HIL Testing, ECU Validation">
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Team Members</label>
                        <div id="attendeesContainer">
                            <div class="flex items-center space-x-2 mb-2">
                                <select class="attendee-select flex-1 border-gray-300 rounded-lg shadow-sm focus:ring-primary-500 focus:border-primary-500 transition-all duration-200">
                                    <option value="">Select team member</option>
                                </select>
                                <button type="button" onclick="addAttendeeField()" class="bg-green-600 hover:bg-green-700 text-white px-3 py-2 rounded-lg text-sm transition-all duration-200 shadow-sm hover:shadow-md">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="flex justify-end space-x-3 pt-4">
                        <button type="button" onclick="closeNewBookingModal()" class="bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200">
                            Cancel
                        </button>
                        <button type="submit" class="bg-[#009A9A] hover:bg-[#007A7A] text-white px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 shadow-sm hover:shadow-md">
                            <i class="fas fa-calendar-check mr-2"></i>Book Lab
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Booking Details Modal -->
    <div id="bookingDetailsModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
        <div class="relative top-10 mx-auto p-5 border w-full max-w-lg shadow-lg rounded-md bg-white">
            <div class="mt-3">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-medium text-gray-900">Booking Details</h3>
                    <button onclick="closeBookingDetailsModal()" class="text-gray-400 hover:text-gray-600 p-1 rounded-lg hover:bg-gray-100 transition-all duration-200">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div id="bookingDetailsContent">
                    <!-- Content will be populated by JavaScript -->
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentDate = new Date();
        let labs = [];
        let bookings = [];
        let selectedLabId = '';

        document.addEventListener('DOMContentLoaded', function() {
            loadLabs();
            updateCalendar();
            
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('startDate').min = today;
            document.getElementById('endDate').min = today;
            
            document.getElementById('startDate').addEventListener('change', function() {
                document.getElementById('endDate').min = this.value;
                updateModalLabOptions(); // Update lab availability when start date changes
            });
            
            document.getElementById('endDate').addEventListener('change', function() {
                updateModalLabOptions(); // Update lab availability when end date changes
            });
        });

        async function loadLabs() {
            try {
                const response = await fetch('/hil/api/labs');
                labs = await response.json();
                
                const labSelector = document.getElementById('labSelector');
                const modalLabSelector = document.getElementById('modalLabSelector');
                
                labSelector.innerHTML = '<option value="">All Labs</option>';
                modalLabSelector.innerHTML = '<option value="">Select a lab</option>';
                
                labs.forEach(lab => {
                    const option1 = new Option(`${lab.lab_name} (${lab.location})`, lab.lab_id);
                    labSelector.add(option1);
                });
                
                // Update modal lab options with availability
                updateModalLabOptions();
                
                loadEmployees();
                loadLabBookings();
            } catch (error) {
                console.error('Error loading labs:', error);
            }
        }

        async function loadEmployees() {
            try {
                const response = await fetch('/hil/api/employees');
                const employees = await response.json();
                window.availableEmployees = employees;
            } catch (error) {
                console.error('Error loading employees:', error);
            }
        }

        async function loadLabBookings() {
            try {
                selectedLabId = document.getElementById('labSelector').value;
                const url = selectedLabId ? `/hil/api/bookings/${selectedLabId}` : '/hil/api/bookings';
                const response = await fetch(url);
                bookings = await response.json();
                updateCalendar();
                updateModalLabOptions();
            } catch (error) {
                console.error('Error loading bookings:', error);
            }
        }

        function updateModalLabOptions() {
            const modalLabSelector = document.getElementById('modalLabSelector');
            const startDateInput = document.getElementById('startDate');
            const endDateInput = document.getElementById('endDate');
            
            modalLabSelector.innerHTML = '<option value="">Select a lab</option>';
            
            labs.forEach(lab => {
                let isAvailable = true;
                let conflictingBooking = null;
                
                // If dates are selected, check availability for those dates
                if (startDateInput.value && endDateInput.value) {
                    const selectedStart = new Date(startDateInput.value);
                    const selectedEnd = new Date(endDateInput.value);
                    
                    conflictingBooking = bookings.find(booking => {
                        if (booking.lab_id != lab.lab_id) return false;
                        
                        const bookingStart = new Date(booking.start_date);
                        const bookingEnd = new Date(booking.end_date);
                        
                        // Only check active bookings for conflicts
                        if (booking.status !== 'active') return false;
                        
                        // Check for date overlap
                        return (
                            (selectedStart <= bookingEnd && selectedEnd >= bookingStart)
                        );
                    });
                    
                    isAvailable = !conflictingBooking;
                } else {
                    // If no dates selected, check if lab is currently booked
                    const today = new Date();
                    today.setHours(0, 0, 0, 0);
                    
                    conflictingBooking = bookings.find(booking => {
                        const startDate = new Date(booking.start_date);
                        const endDate = new Date(booking.end_date);
                        return booking.lab_id == lab.lab_id && booking.status === 'active' && today >= startDate && today <= endDate;
                    });
                    
                    isAvailable = !conflictingBooking;
                }
                
                let optionText;
                if (!isAvailable) {
                    optionText = `${lab.lab_name} (${lab.location}) - Not Available`;
                } else {
                    optionText = `${lab.lab_name} (${lab.location}) - Available`;
                }
                    
                const option = new Option(optionText, lab.lab_id);
                if (!isAvailable) {
                    option.disabled = true;
                    option.style.color = '#dc2626';
                    option.style.backgroundColor = '#fef2f2';
                } else {
                    option.style.color = '#059669';
                }
                modalLabSelector.add(option);
            });
        }

        function updateCalendar() {
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth();
            
            document.getElementById('currentMonth').textContent = 
                new Date(year, month).toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
            
            const firstDay = new Date(year, month, 1);
            const lastDay = new Date(year, month + 1, 0);
            const startDate = new Date(firstDay);
            startDate.setDate(startDate.getDate() - firstDay.getDay());
            
            const calendarBody = document.getElementById('calendarBody');
            calendarBody.innerHTML = '';
            
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            
            for (let week = 0; week < 6; week++) {
                for (let day = 0; day < 7; day++) {
                    const currentDay = new Date(startDate);
                    currentDay.setDate(startDate.getDate() + (week * 7) + day);
                    
                    const dayElement = document.createElement('div');
                    dayElement.className = `calendar-day border-r border-b border-gray-200 p-2 cursor-pointer hover:bg-gray-50 ${
                        currentDay.getMonth() !== month ? 'other-month' : ''
                    } ${currentDay.getTime() === today.getTime() ? 'today' : ''}`;
                    
                    dayElement.onclick = () => showNewBookingModal(currentDay);
                    
                    const dayNumber = document.createElement('div');
                    dayNumber.className = 'font-medium text-sm mb-1';
                    dayNumber.textContent = currentDay.getDate();
                    dayElement.appendChild(dayNumber);
                    
                    const dayBookings = bookings.filter(booking => {
                        const startDate = new Date(booking.start_date);
                        const endDate = new Date(booking.end_date);
                        return currentDay >= startDate && currentDay <= endDate;
                    });
                    
                    dayBookings.forEach(booking => {
                        const bookingElement = document.createElement('div');
                        const isOverdue = new Date(booking.end_date) < today;
                        const colorClass = isOverdue ? 'bg-red-500' : 'bg-blue-500';
                        
                        bookingElement.className = `text-white text-xs p-1 mb-1 rounded cursor-pointer ${colorClass}`;
                        
                        const projectText = booking.project_name.substring(0, 15) + (booking.project_name.length > 15 ? '...' : '');
                        const labText = booking.lab_name ? booking.lab_name.substring(0, 12) + (booking.lab_name.length > 12 ? '...' : '') : '';
                        const bookedBy = booking.booked_by_name ? booking.booked_by_name.split(' ')[0] : '';
                        
                        bookingElement.innerHTML = `
                            <div class="font-medium text-xs">${projectText}</div>
                            <div class="text-xs opacity-80">${labText}</div>
                            <div class="text-xs opacity-90">by ${bookedBy}</div>
                        `;
                        
                        bookingElement.onclick = (e) => {
                            e.stopPropagation();
                            showBookingDetails(booking);
                        };
                        dayElement.appendChild(bookingElement);
                    });
                    
                    calendarBody.appendChild(dayElement);
                }
            }
        }

        function previousMonth() {
            currentDate.setMonth(currentDate.getMonth() - 1);
            updateCalendar();
        }

        function nextMonth() {
            currentDate.setMonth(currentDate.getMonth() + 1);
            updateCalendar();
        }

        function addAttendeeField() {
            const container = document.getElementById('attendeesContainer');
            const newField = document.createElement('div');
            newField.className = 'flex items-center space-x-2 mb-2';
            newField.innerHTML = `
                <select class="attendee-select flex-1 border-gray-300 rounded-lg shadow-sm focus:ring-primary-500 focus:border-primary-500 transition-all duration-200">
                    <option value="">Select team member</option>
                </select>
                <button type="button" onclick="removeAttendeeField(this)" class="bg-red-600 hover:bg-red-700 text-white px-3 py-2 rounded-lg text-sm transition-all duration-200 shadow-sm hover:shadow-md">
                    <i class="fas fa-minus"></i>
                </button>
            `;
            container.appendChild(newField);
            populateAttendeeSelect(newField.querySelector('.attendee-select'));
        }

        function removeAttendeeField(button) {
            button.parentElement.remove();
        }

        function populateAttendeeSelect(selectElement) {
            if (window.availableEmployees) {
                window.availableEmployees.forEach(employee => {
                    const option = new Option(
                        `${employee.full_name} (${employee.department_name})`, 
                        employee.user_id
                    );
                    selectElement.add(option);
                });
            }
        }

        function showBookingDetails(booking) {
            const content = `
                <div class="space-y-3">
                    <div>
                        <h4 class="font-medium text-gray-900">${booking.project_name}</h4>
                        <p class="text-sm text-gray-600">${booking.lab_name}</p>
                    </div>
                    <div>
                        <p class="text-sm"><strong>Duration:</strong> ${new Date(booking.start_date).toLocaleDateString()} - ${new Date(booking.end_date).toLocaleDateString()}</p>
                        <p class="text-sm"><strong>Booked by:</strong> ${booking.booked_by_name}</p>
                    </div>
                    ${booking.project_description ? `<div><p class="text-sm"><strong>Description:</strong> ${booking.project_description}</p></div>` : ''}
                    ${booking.booking_purpose ? `<div><p class="text-sm"><strong>Purpose:</strong> ${booking.booking_purpose}</p></div>` : ''}
                </div>
            `;
            document.getElementById('bookingDetailsContent').innerHTML = content;
            document.getElementById('bookingDetailsModal').classList.remove('hidden');
        }

        function closeBookingDetailsModal() {
            document.getElementById('bookingDetailsModal').classList.add('hidden');
        }

        function closeNewBookingModal() {
            document.getElementById('newBookingModal').classList.add('hidden');
            document.getElementById('bookingForm').reset();
        }

        document.getElementById('bookingForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const attendeeSelects = document.querySelectorAll('.attendee-select');
            const attendees = Array.from(attendeeSelects)
                .map(select => select.value)
                .filter(value => value !== '');
            
            const formData = {
                lab_id: document.getElementById('modalLabSelector').value,
                project_name: document.getElementById('projectName').value,
                project_description: document.getElementById('projectDescription').value,
                start_date: document.getElementById('startDate').value,
                end_date: document.getElementById('endDate').value,
                booking_purpose: document.getElementById('testingPurpose').value,
                attendees: attendees
            };
            
            try {
                const response = await fetch('/hil/book', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData)
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    closeNewBookingModal();
                    alert('Lab booked successfully!');
                    loadLabBookings(); // Refresh calendar
                } else {
                    alert('Error: ' + result.error);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error submitting booking request');
            }
        });

        function showNewBookingModal(selectedDate) {
            if (selectedDate) {
                const dateStr = selectedDate.toISOString().split('T')[0];
                document.getElementById('startDate').value = dateStr;
                document.getElementById('endDate').value = dateStr;
            }
            
            const firstSelect = document.querySelector('.attendee-select');
            if (firstSelect && window.availableEmployees) {
                firstSelect.innerHTML = '<option value="">Select team member</option>';
                populateAttendeeSelect(firstSelect);
            }
            
            document.getElementById('newBookingModal').classList.remove('hidden');
        }
    </script>
</body>
</html>