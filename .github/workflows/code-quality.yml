name: Code Quality

on:
  push:
    branches: [ main, gcp-deploy-win, final-monitor1 ]
  pull_request:
    branches: [ main, gcp-deploy-win, final-monitor1 ]

jobs:
  code-quality:
    name: 🔍 Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔍 ESLint Analysis
      run: |
        echo "Running ESLint analysis..."
        npx eslint . --ext .js --format=json --output-file eslint-report.json || true
        npx eslint . --ext .js --format=stylish || true
      continue-on-error: true
      
    - name: 📊 Code Complexity Analysis
      run: |
        echo "Analyzing code complexity..."
        find . -name "*.js" -not -path "./node_modules/*" -not -path "./.git/*" | head -20 | while read file; do
          echo "Analyzing: $file"
          lines=$(wc -l < "$file")
          echo "  Lines: $lines"
          if [ $lines -gt 500 ]; then
            echo "  ⚠️  Large file detected ($lines lines)"
          fi
        done
        
    - name: 🔒 Security Analysis
      run: |
        echo "Running security analysis..."
        # Check for common security issues
        echo "Checking for hardcoded secrets..."
        if grep -r -i "password.*=" --include="*.js" --exclude-dir=node_modules . | grep -v "req.body.password" | grep -v "current_password" | grep -v "new_password"; then
          echo "⚠️ Potential hardcoded passwords found"
        fi
        
        echo "Checking for SQL injection vulnerabilities..."
        if grep -r "execute.*+\|query.*+" --include="*.js" --exclude-dir=node_modules .; then
          echo "⚠️ Potential SQL injection vulnerabilities found"
        else
          echo "✅ No obvious SQL injection patterns found"
        fi
        
    - name: 📏 Code Metrics
      run: |
        echo "Calculating code metrics..."
        echo "📁 Project Structure:"
        find . -type f -name "*.js" -not -path "./node_modules/*" | head -20
        
        echo "📊 File Counts:"
        echo "JavaScript files: $(find . -name "*.js" -not -path "./node_modules/*" | wc -l)"
        echo "EJS templates: $(find . -name "*.ejs" | wc -l)"
        echo "SQL files: $(find . -name "*.sql" | wc -l)"
        echo "Config files: $(find . -name "*.json" -not -path "./node_modules/*" | wc -l)"
        
        echo "📊 Code Lines:"
        echo "Total JS lines: $(find . -name "*.js" -not -path "./node_modules/*" -exec wc -l {} + | tail -1 | awk '{print $1}')"
        
    - name: 🏗️ Architecture Analysis
      run: |
        echo "Analyzing project architecture..."
        echo "📋 Route Files:"
        find src/routes -name "*.js" 2>/dev/null | while read route; do
          echo "  - $(basename $route .js): $(grep -c "router\." "$route" || echo 0) endpoints"
        done
        
        echo "📋 Database Tables:"
        if [ -f "setup-db.js" ]; then
          grep -i "CREATE TABLE" setup-db.js | sed 's/.*CREATE TABLE[^A-Za-z]*\([A-Za-z_]*\).*/  - \1/' | head -10
        fi
        
    - name: 📋 TODO Analysis
      run: |
        echo "Finding TODOs and FIXMEs..."
        grep -r -n "TODO\|FIXME\|HACK\|XXX" --include="*.js" --include="*.ejs" . | head -20 || echo "No TODOs found"
        
    - name: 🎨 Code Style Check
      run: |
        echo "Checking code style consistency..."
        echo "Checking for consistent indentation..."
        find . -name "*.js" -not -path "./node_modules/*" | head -10 | while read file; do
          tabs=$(grep -c "^	" "$file" || echo 0)
          spaces=$(grep -c "^    " "$file" || echo 0)
          echo "$file: Tabs: $tabs, 4-spaces: $spaces"
        done
