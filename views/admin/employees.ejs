<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Employees - Marquardt India Pvt. Ltd.</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/responsive.css">
    <style>
        /* Custom styles for search and filter */
        .search-filter-section {
            background-color: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 0.5rem;
            padding: 1rem;
        }
        
        .results-counter {
            font-size: 0.875rem;
            color: #64748b;
        }
        
        .selected-counter {
            font-size: 0.875rem;
            color: #3b82f6;
            font-weight: 500;
        }
        
        /* Highlight filtered rows */
        #employeesTable tbody tr:not([style*="display: none"]) {
            background-color: white;
        }
        
        /* Style for search input focus */
        #searchInput:focus {
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }
        
        /* Loading state for table */
        .table-loading {
            opacity: 0.6;
            pointer-events: none;
        }
    </style>
</head>
<body class="bg-gray-50">
    <%- include('../partials/navbar') %>
    
    <main class="ml-0 lg:ml-64 flex flex-col h-screen">
        <!-- Fixed Header Section -->
        <div class="flex-shrink-0 p-4 sm:p-6 bg-gray-50 border-b border-gray-200">
            <%- include('../partials/messages') %>
            
            <div class="mb-4">
                <h1 class="text-2xl sm:text-3xl font-bold text-gray-900">Manage Employees</h1>
                <p class="text-gray-600">Welcome <%= user.full_name %>! Create, edit, and manage employee accounts</p>
            </div>
        </div>
        
        <!-- Scrollable Content Area -->
        <div class="flex-1 overflow-y-auto p-4 sm:p-6">
        
        <!-- Employees List -->
        <div class="bg-white shadow rounded-lg">
            <div class="px-4 py-5 sm:p-6">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg leading-6 font-medium text-gray-900">
                        Current Employees
                    </h3>
                    <button id="createEmployeeBtn" class="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white hover:bg-opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2" style="background-color: #009A9A;">
                        <i class="fas fa-user-plus mr-2"></i>Create Employee
                    </button>
                </div>

                <!-- Search and Filter Section -->
                <div class="mb-6 space-y-4 search-filter-section">
                    <!-- Search Bar -->
                    <div class="flex flex-col sm:flex-row gap-4">
                        <div class="flex-1">
                            <label for="searchInput" class="block text-sm font-medium text-gray-700 mb-1">Search Employees</label>
                            <div class="relative">
                                <input type="text" id="searchInput" placeholder="Search by name, username, or email..." 
                                       class="block w-full px-3 py-2 pl-10 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <i class="fas fa-search text-gray-400"></i>
                                </div>
                            </div>
                        </div>
                        <div class="flex gap-2">
                            <button id="clearFiltersBtn" class="px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                <i class="fas fa-times mr-1"></i>Clear
                            </button>
                        </div>
                    </div>

                    <!-- Filters -->
                    <div class="grid grid-cols-1 sm:grid-cols-3 gap-4">
                        <div>
                            <label for="departmentFilter" class="block text-sm font-medium text-gray-700 mb-1">Department</label>
                            <select id="departmentFilter" class="block w-full px-3 py-2 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                <option value="">All Departments</option>
                                <option value="RDT-PU">RDT-PU</option>
                                <option value="RDA-PU">RDA-PU</option>
                                <option value="RDF-PU">RDF-PU</option>
                                <option value="RDL-PU">RDL-PU</option>
                                <option value="RDD-PU">RDD-PU</option>
                                <option value="RDE-PU">RDE-PU</option>
                                <option value="RDM-PU">RDM-PU</option>
                                <option value="RDS-PU">RDS-PU</option>
                                <option value="RDV-PU">RDV-PU</option>
                            </select>
                        </div>
                        <div>
                            <label for="roleFilter" class="block text-sm font-medium text-gray-700 mb-1">Role</label>
                            <select id="roleFilter" class="block w-full px-3 py-2 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                <option value="">All Roles</option>
                                <option value="employee">Employee</option>
                                <option value="monitor">Monitor</option>
                                <option value="admin">Admin</option>
                            </select>
                        </div>
                        <div>
                            <label for="statusFilter" class="block text-sm font-medium text-gray-700 mb-1">Status</label>
                            <select id="statusFilter" class="block w-full px-3 py-2 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                <option value="">All Status</option>
                                <option value="active">Active</option>
                                <option value="inactive">Inactive</option>
                            </select>
                        </div>
                    </div>

                    <!-- Results Counter -->
                    <div class="flex justify-between items-center text-sm">
                        <span id="resultsCounter" class="results-counter">Showing all employees</span>
                        <span id="selectedCounter" class="selected-counter">0 selected</span>
                    </div>
                </div>

                <div class="overflow-x-auto w-full">
                    <table class="min-w-full divide-y divide-gray-200" id="employeesTable">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    <input type="checkbox" id="selectAll" class="rounded">
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Full Name
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Username
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Email
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Department
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Role
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Status
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Actions
                                </th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            <% if (employees && employees.length > 0) { %>
                                <% employees.forEach(employee => { %>
                                    <tr>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <input type="checkbox" name="employee_ids" value="<%= employee.user_id %>" class="rounded">
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                            <%= employee.full_name %>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            <%= employee.username %>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            <%= employee.email %>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            <%= employee.department_name || '-' %>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                                                <%= employee.role === 'monitor' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800' %>">
                                                <%= employee.role.charAt(0).toUpperCase() + employee.role.slice(1) %>
                                            </span>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                                                <%= employee.is_active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800' %>">
                                                <%= employee.is_active ? 'Active' : 'Inactive' %>
                                            </span>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">

                                            <!-- Edit buttons -->
                                            <!-- <button class="text-indigo-600 hover:text-indigo-900" onclick="editEmployee('<%= employee.user_id %>')">
                                                <i class="fas fa-edit"></i> Edit
                                            </button> --> 
                                            <!-- can be implemented later -->

                                            <form method="POST" action="/admin/toggle-employee-status/<%= employee.user_id %>" class="inline-block">
                                                <button type="submit" class="<%= employee.is_active ? 'text-orange-600 hover:text-orange-900' : 'text-green-600 hover:text-green-900' %>" onclick="return confirm('Are you sure you want to <%= employee.is_active ? 'deactivate' : 'activate' %> this employee?')">
                                                    <i class="fas fa-<%= employee.is_active ? 'user-slash' : 'user-check' %>"></i> 
                                                    <%= employee.is_active ? 'Deactivate' : 'Activate' %>
                                                </button>
                                            </form>
                                        </td>
                                    </tr>
                                <% }); %>
                            <% } else { %>
                                <tr>
                                    <td colspan="8" class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center">
                                        No employees found
                                    </td>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                </div>
                
                <!-- Bulk Actions -->
                <div class="mt-4 flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2">
                    <button id="bulkDeactivateBtn" class="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-orange-600 hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500">
                        <i class="fas fa-user-slash mr-2"></i>Deactivate Selected
                    </button>
                    <button id="bulkActivateBtn" class="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                        <i class="fas fa-user-check mr-2"></i>Activate Selected
                    </button>
                </div>
            </div>
        </div>
        </div> <!-- End scrollable content area -->
    </main>
    
    <!-- Create Employee Modal -->
    <div id="createEmployeeModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden">
        <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
            <div class="mt-3">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-medium text-gray-900">Create New Employee</h3>
                    <button id="closeModal" class="text-gray-400 hover:text-gray-600">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form action="/admin/create-employee" method="POST" class="space-y-4">
                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        <div>
                            <label for="modal_full_name" class="block text-sm font-medium text-gray-700">Full Name</label>
                            <input type="text" id="modal_full_name" name="full_name" required 
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        </div>
                        <div>
                            <label for="modal_username" class="block text-sm font-medium text-gray-700">Username</label>
                            <input type="text" id="modal_username" name="username" required 
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        </div>
                        <div>
                            <label for="modal_email" class="block text-sm font-medium text-gray-700">Email</label>
                            <input type="email" id="modal_email" name="email" required 
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        </div>
                        <div>
                            <label for="modal_password" class="block text-sm font-medium text-gray-700">Password</label>
                            <div class="relative">
                                <input type="password" id="modal_password" name="password" required 
                                       class="mt-1 block w-full px-3 py-2 pr-10 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                <button type="button" 
                                        onclick="togglePassword('modal_password', this)"
                                        class="absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400 hover:text-gray-600">
                                    <i class="fas fa-eye" id="modal_password_icon"></i>
                                </button>
                            </div>
                        </div>
                        <div>
                            <label for="modal_department_id" class="block text-sm font-medium text-gray-700">Department</label>
                            <select id="modal_department_id" name="department_id" required 
                                    class="mt-1 block w-full px-3 py-2 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                <option value="">Select Department</option>
                                <option value="1">RDT-PU</option>
                                <option value="2">RDA-PU</option>
                                <option value="3">RDF-PU</option>
                                <option value="4">RDL-PU</option>
                                <option value="5">RDD-PU</option>
                                <option value="6">RDE-PU</option>
                                <option value="7">RDM-PU</option>
                                <option value="8">RDS-PU</option>
                                <option value="9">RDV-PU</option>
                            </select>
                        </div>
                        <div>
                            <label for="modal_role" class="block text-sm font-medium text-gray-700">Role</label>
                            <select id="modal_role" name="role" required 
                                    class="mt-1 block w-full px-3 py-2 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                <option value="employee">Employee</option>
                                <option value="monitor">Monitor</option>
                            </select>
                        </div>
                        <div id="monitor_end_date_field" class="hidden">
                            <label for="modal_end_date" class="block text-sm font-medium text-gray-700">Monitor End Date</label>
                            <input type="date" id="modal_end_date" name="end_date" 
                                   min="<%= new Date().toISOString().split('T')[0] %>"
                                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        </div>
                    </div>
                    <div class="flex justify-end space-x-2 pt-4">
                        <button type="button" id="cancelBtn" class="px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                            Cancel
                        </button>
                        <button type="submit" class="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white hover:bg-opacity-90" style="background-color: #009A9A;">
                            <i class="fas fa-user-plus mr-2"></i>Create Employee
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <script>
        // Modal functionality
        const modal = document.getElementById('createEmployeeModal');
        const createBtn = document.getElementById('createEmployeeBtn');
        const closeBtn = document.getElementById('closeModal');
        const cancelBtn = document.getElementById('cancelBtn');
        
        createBtn.addEventListener('click', () => {
            modal.classList.remove('hidden');
        });
        
        closeBtn.addEventListener('click', () => {
            modal.classList.add('hidden');
        });
        
        cancelBtn.addEventListener('click', () => {
            modal.classList.add('hidden');
        });
        
        // Close modal when clicking outside
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.classList.add('hidden');
            }
        });
        
        document.getElementById('selectAll').addEventListener('change', function() {
            const checkboxes = document.querySelectorAll('input[name="employee_ids"]');
            checkboxes.forEach(checkbox => {
                checkbox.checked = this.checked;
            });
        });

        function getSelectedEmployees() {
            // Only get visible (not filtered out) checked checkboxes
            const checkboxes = document.querySelectorAll('#employeesTable tbody tr:not([style*="display: none"]) input[name="employee_ids"]:checked');
            const selectedIds = Array.from(checkboxes).map(cb => cb.value);
            console.log('Selected checkboxes count:', checkboxes.length);
            console.log('Selected employee IDs:', selectedIds);
            return selectedIds;
        }

        // Status toggle now uses form submission instead of AJAX

        // Bulk actions
        document.getElementById('bulkDeactivateBtn').addEventListener('click', function() {
            const selectedIds = getSelectedEmployees();
            if (selectedIds.length === 0) {
                alert('Please select at least one employee to deactivate.');
                return;
            }
            if (confirm(`Are you sure you want to deactivate ${selectedIds.length} employee(s)?`)) {
                console.log('Sending deactivate request with IDs:', selectedIds);
                
                fetch('/admin/bulk-deactivate-employees', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({
                        employee_ids: selectedIds
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => Promise.reject(err));
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        alert(data.message || 'Employees deactivated successfully');
                        location.reload();
                    } else {
                        alert('Error: ' + (data.error || 'Failed to deactivate employees'));
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error: ' + (error.error || error.message || 'Failed to deactivate employees'));
                });
            }
        });

        document.getElementById('bulkActivateBtn').addEventListener('click', function() {
            const selectedIds = getSelectedEmployees();
            if (selectedIds.length === 0) {
                alert('Please select at least one employee to activate.');
                return;
            }
            if (confirm(`Are you sure you want to activate ${selectedIds.length} employee(s)?`)) {
                console.log('Sending activate request with IDs:', selectedIds);
                
                fetch('/admin/bulk-activate-employees', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({
                        employee_ids: selectedIds
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => Promise.reject(err));
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        alert(data.message || 'Employees activated successfully');
                        location.reload();
                    } else {
                        alert('Error: ' + (data.error || 'Failed to activate employees'));
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error: ' + (error.error || error.message || 'Failed to activate employees'));
                });
            }
        });

        // Password visibility toggle function
        function togglePassword(inputId, button) {
            const input = document.getElementById(inputId);
            const icon = document.getElementById(inputId + '_icon');
            
            if (input.type === 'password') {
                input.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
                button.setAttribute('title', 'Hide password');
            } else {
                input.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
                button.setAttribute('title', 'Show password');
            }
        }

        // Initialize tooltips for password visibility buttons
        document.addEventListener('DOMContentLoaded', function() {
            const toggleButtons = document.querySelectorAll('[onclick^="togglePassword"]');
            toggleButtons.forEach(button => {
                button.setAttribute('title', 'Show password');
            });
            
            // Initialize search and filter functionality
            initializeSearchAndFilter();
            
            // Initialize role change handler for monitor end date
            initializeRoleChangeHandler();
        });

        // Handle role change to show/hide monitor end date field
        function initializeRoleChangeHandler() {
            const roleSelect = document.getElementById('modal_role');
            const endDateField = document.getElementById('monitor_end_date_field');
            const endDateInput = document.getElementById('modal_end_date');

            function toggleEndDateField() {
                if (roleSelect.value === 'monitor') {
                    endDateField.classList.remove('hidden');
                    endDateInput.setAttribute('required', 'required');
                } else {
                    endDateField.classList.add('hidden');
                    endDateInput.removeAttribute('required');
                    endDateInput.value = ''; // Clear the value when hidden
                }
            }

            // Initial check
            toggleEndDateField();

            // Listen for changes
            roleSelect.addEventListener('change', toggleEndDateField);
        }

        // Search and Filter Functionality
        function initializeSearchAndFilter() {
            const searchInput = document.getElementById('searchInput');
            const departmentFilter = document.getElementById('departmentFilter');
            const roleFilter = document.getElementById('roleFilter');
            const statusFilter = document.getElementById('statusFilter');
            const clearFiltersBtn = document.getElementById('clearFiltersBtn');
            const resultsCounter = document.getElementById('resultsCounter');
            const selectedCounter = document.getElementById('selectedCounter');
            const selectAllCheckbox = document.getElementById('selectAll');

            // Store original table rows
            const tableBody = document.querySelector('#employeesTable tbody');
            const allRows = Array.from(tableBody.querySelectorAll('tr'));
            
            // Debounce function for search input
            let searchTimeout;
            function debounceSearch() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(filterEmployees, 300);
            }
            
            // Function to filter and display results
            function filterEmployees() {
                const searchTerm = searchInput.value.toLowerCase().trim();
                const selectedDepartment = departmentFilter.value.toLowerCase();
                const selectedRole = roleFilter.value.toLowerCase();
                const selectedStatus = statusFilter.value.toLowerCase();

                let visibleRows = 0;

                allRows.forEach(row => {
                    // Skip the "no employees" row if it exists
                    if (row.querySelector('td[colspan]')) {
                        row.style.display = 'none';
                        return;
                    }

                    const cells = row.querySelectorAll('td');
                    if (cells.length < 7) return;

                    const fullName = cells[1].textContent.toLowerCase();
                    const username = cells[2].textContent.toLowerCase();
                    const email = cells[3].textContent.toLowerCase();
                    const department = cells[4].textContent.toLowerCase();
                    const role = cells[5].textContent.toLowerCase();
                    const status = cells[6].textContent.toLowerCase();

                    // Check search term (matches name, username, or email)
                    const matchesSearch = !searchTerm || 
                        fullName.includes(searchTerm) || 
                        username.includes(searchTerm) || 
                        email.includes(searchTerm);

                    // Check filters
                    const matchesDepartment = !selectedDepartment || department.includes(selectedDepartment);
                    const matchesRole = !selectedRole || role.includes(selectedRole);
                    const matchesStatus = !selectedStatus || status.includes(selectedStatus);

                    // Show/hide row based on all criteria
                    if (matchesSearch && matchesDepartment && matchesRole && matchesStatus) {
                        row.style.display = '';
                        visibleRows++;
                    } else {
                        row.style.display = 'none';
                        // Uncheck hidden rows
                        const checkbox = row.querySelector('input[name="employee_ids"]');
                        if (checkbox) {
                            checkbox.checked = false;
                        }
                    }
                });

                // Update results counter
                updateResultsCounter(visibleRows, allRows.length - 1); // -1 to exclude header or no-data row
                updateSelectedCounter();
                
                // Update select all checkbox
                updateSelectAllState();
            }

            function updateResultsCounter(visible, total) {
                if (visible === total) {
                    resultsCounter.textContent = `Showing all ${total} employees`;
                } else {
                    resultsCounter.textContent = `Showing ${visible} of ${total} employees`;
                }
            }

            function updateSelectedCounter() {
                const visibleChecked = document.querySelectorAll('#employeesTable tbody tr:not([style*="display: none"]) input[name="employee_ids"]:checked');
                selectedCounter.textContent = `${visibleChecked.length} selected`;
            }

            function updateSelectAllState() {
                const visibleCheckboxes = document.querySelectorAll('#employeesTable tbody tr:not([style*="display: none"]) input[name="employee_ids"]');
                const visibleChecked = document.querySelectorAll('#employeesTable tbody tr:not([style*="display: none"]) input[name="employee_ids"]:checked');
                
                if (visibleCheckboxes.length === 0) {
                    selectAllCheckbox.indeterminate = false;
                    selectAllCheckbox.checked = false;
                } else if (visibleChecked.length === visibleCheckboxes.length) {
                    selectAllCheckbox.indeterminate = false;
                    selectAllCheckbox.checked = true;
                } else if (visibleChecked.length > 0) {
                    selectAllCheckbox.indeterminate = true;
                    selectAllCheckbox.checked = false;
                } else {
                    selectAllCheckbox.indeterminate = false;
                    selectAllCheckbox.checked = false;
                }
            }

            function clearAllFilters() {
                searchInput.value = '';
                departmentFilter.value = '';
                roleFilter.value = '';
                statusFilter.value = '';
                filterEmployees();
            }

            // Event listeners
            searchInput.addEventListener('input', debounceSearch);
            departmentFilter.addEventListener('change', filterEmployees);
            roleFilter.addEventListener('change', filterEmployees);
            statusFilter.addEventListener('change', filterEmployees);
            clearFiltersBtn.addEventListener('click', clearAllFilters);

            // Keyboard shortcuts
            document.addEventListener('keydown', function(e) {
                // Ctrl+F or Cmd+F to focus search (prevent default browser search)
                if ((e.ctrlKey || e.metaKey) && e.key === 'f') {
                    e.preventDefault();
                    searchInput.focus();
                }
                // Escape to clear search when search input is focused
                if (e.key === 'Escape' && document.activeElement === searchInput) {
                    clearAllFilters();
                }
            });

            // Update select all functionality to work with filtered results
            selectAllCheckbox.addEventListener('change', function() {
                const visibleCheckboxes = document.querySelectorAll('#employeesTable tbody tr:not([style*="display: none"]) input[name="employee_ids"]');
                visibleCheckboxes.forEach(checkbox => {
                    checkbox.checked = this.checked;
                });
                updateSelectedCounter();
            });

            // Update selected counter when individual checkboxes change
            document.addEventListener('change', function(e) {
                if (e.target.name === 'employee_ids') {
                    updateSelectedCounter();
                    updateSelectAllState();
                }
            });

            // Initial setup
            updateResultsCounter(allRows.length - 1, allRows.length - 1);
            updateSelectedCounter();
        }
    </script>
</body>
</html>
