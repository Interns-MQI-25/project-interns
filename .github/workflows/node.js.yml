# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main", "admin" ]
  pull_request:
    branches: [ "main", "admin" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build --if-present
    
    - name: Run tests
      run: npm test --if-present
    
    - name: Check for security vulnerabilities
      run: npm audit --audit-level moderate
      continue-on-error: true
    
    - name: Lint code
      run: npm run lint --if-present
      continue-on-error: true

  database-test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: product_management_system_test
          MYSQL_USER: sigma
          MYSQL_PASSWORD: sigma
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Wait for MySQL
      run: |
        until mysqladmin ping -h"127.0.0.1" -P3306 -uroot -proot --silent; do
          echo 'waiting for mysql...'
          sleep 1
        done
    
    - name: Setup test database
      run: |
        mysql -h127.0.0.1 -P3306 -uroot -proot -e "CREATE DATABASE IF NOT EXISTS product_management_system_test;"
        mysql -h127.0.0.1 -P3306 -uroot -proot product_management_system_test < database.sql
      env:
        MYSQL_HOST: 127.0.0.1
        MYSQL_PORT: 3306
        MYSQL_USER: root
        MYSQL_PASSWORD: root
        MYSQL_DATABASE: product_management_system_test
    
    - name: Run database tests
      run: npm run test:db --if-present
      env:
        NODE_ENV: test
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_USER: sigma
        DB_PASSWORD: sigma
        DB_NAME: product_management_system_test
